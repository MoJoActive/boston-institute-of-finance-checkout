{"version":3,"file":"372-2800e734.js","mappings":"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","sources":["webpack://checkout/./packages/core/src/app/address/getAddressFormFieldInputId.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/AddressSelector.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/AddressSelectorUk.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/AddressSelectorFactory.ts","webpack://checkout/./packages/core/src/app/ui/popover/Popover.tsx","webpack://checkout/./packages/core/src/app/ui/popover/PopoverList.tsx","webpack://checkout/./packages/core/src/app/ui/autocomplete/Autocomplete.tsx","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/GoogleAutocompleteScriptLoader.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/getGoogleAutocompleteScriptLoader.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/GoogleAutocompleteService.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/GoogleAutocomplete.tsx","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/GoogleAutocompleteFormField.tsx","webpack://checkout/./packages/core/src/app/address/AddressForm.tsx","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/mapToAddress.ts","webpack://checkout/./packages/core/src/app/address/AddressSelectButton.tsx","webpack://checkout/./packages/core/src/app/address/AddressSelect.tsx","webpack://checkout/./packages/core/src/app/address/isEqualAddress.ts","webpack://checkout/./packages/core/src/app/address/isValidCustomerAddress.ts","webpack://checkout/./packages/core/src/app/address/mapAddressFromFormValues.ts","webpack://checkout/./packages/core/src/app/orderComments/OrderComments.tsx","webpack://checkout/./packages/core/src/app/payment/getPreselectedPayment.ts","webpack://checkout/./packages/core/src/app/shipping/getShippableItemsCount.ts","webpack://checkout/./packages/core/src/app/ui/dropdown/DropdownTrigger.tsx","webpack://checkout/./packages/payment-integration-api/src/CheckoutRootWrapperIds.ts"],"sourcesContent":["import { AddressKeyMap } from './address';\r\n\r\nexport const ADDRESS_FIELD_IDS: AddressKeyMap = {\r\n    address1: 'addressLine1',\r\n    address2: 'addressLine2',\r\n    postalCode: 'postCode',\r\n    stateOrProvince: 'province',\r\n    stateOrProvinceCode: 'provinceCode',\r\n};\r\n\r\nexport function getAddressFormFieldLegacyName(name: string): string {\r\n    return `${ADDRESS_FIELD_IDS[name] || name}`;\r\n}\r\n\r\nexport function getAddressFormFieldInputId(name: string): string {\r\n    return `${getAddressFormFieldLegacyName(name)}Input`;\r\n}\r\n\r\nexport function getAddressFormFieldLabelId(name: string): string {\r\n    return `${getAddressFormFieldLegacyName(name)}Label`;\r\n}\r\n","import { GoogleAddressFieldType } from './googleAutocompleteTypes';\r\n\r\nexport default class AddressSelector {\r\n    protected _address: google.maps.GeocoderAddressComponent[] | undefined;\r\n    protected _name: string;\r\n\r\n    constructor(googlePlace: google.maps.places.PlaceResult) {\r\n        const { address_components, name } = googlePlace;\r\n\r\n        this._name = name;\r\n        this._address = address_components;\r\n    }\r\n\r\n    getState(): string {\r\n        return this._get('administrative_area_level_1', 'short_name');\r\n    }\r\n\r\n    getStreet(): string {\r\n        return this._name;\r\n    }\r\n\r\n    getStreet2(): string {\r\n        if (this.getCountry() === 'NZ') {\r\n            return this._get('sublocality', 'short_name');\r\n        }\r\n\r\n        return this._get('subpremise', 'short_name');\r\n    }\r\n\r\n    getCity(): string {\r\n        return (\r\n            this._get('postal_town', 'long_name') ||\r\n            this._get('locality', 'long_name') ||\r\n            this._get('neighborhood', 'short_name')\r\n        );\r\n    }\r\n\r\n    getCountry(): string {\r\n        return this._get('country', 'short_name');\r\n    }\r\n\r\n    getPostCode(): string {\r\n        return this._get('postal_code', 'short_name');\r\n    }\r\n\r\n    protected _get(\r\n        type: GoogleAddressFieldType,\r\n        access: Exclude<keyof google.maps.GeocoderAddressComponent, 'types'>,\r\n    ): string {\r\n        const element =\r\n            this._address && this._address.find((field) => field.types.indexOf(type) !== -1);\r\n\r\n        if (element) {\r\n            return element[access];\r\n        }\r\n\r\n        return '';\r\n    }\r\n}\r\n","import AddressSelector from './AddressSelector';\r\n\r\nexport default class AddressSelectorUK extends AddressSelector {\r\n    getState(): string {\r\n        return '';\r\n    }\r\n\r\n    getStreet2(): string {\r\n        return this._get('locality', 'long_name');\r\n    }\r\n\r\n    getPostCode(): string {\r\n        return '';\r\n    }\r\n}\r\n","import AddressSelector from './AddressSelector';\r\nimport AddressSelectorUK from './AddressSelectorUk';\r\n\r\nexport default class AddressSelectorFactory {\r\n    static create(autocompleteData: google.maps.places.PlaceResult): AddressSelector {\r\n        const addressSelector = new AddressSelector(autocompleteData);\r\n\r\n        switch (addressSelector.getCountry()) {\r\n            case 'GB':\r\n                return new AddressSelectorUK(autocompleteData);\r\n        }\r\n\r\n        return addressSelector;\r\n    }\r\n}\r\n","import React, { FunctionComponent } from 'react';\r\n\r\nimport './Popover.scss';\r\n\r\nexport interface PopoverProps {\r\n    children: React.ReactNode;\r\n}\r\n\r\nconst Popover: FunctionComponent<PopoverProps> = ({ children }) => {\r\n    return <div className=\"popover\">{children}</div>;\r\n};\r\n\r\nexport default Popover;\r\n","import React, { FunctionComponent, memo } from 'react';\r\n\r\nimport './PopoverList.scss';\r\n\r\nexport interface PopoverListProps {\r\n    menuProps?: any;\r\n    highlightedIndex?: number;\r\n    getItemProps?: any;\r\n    items: PopoverListItem[];\r\n    testId?: string;\r\n}\r\n\r\nexport interface PopoverListItem {\r\n    id: string;\r\n    content: React.ReactChild[] | React.ReactChild;\r\n}\r\n\r\nconst PopoverList: FunctionComponent<PopoverListProps> = ({\r\n    highlightedIndex = -1,\r\n    testId,\r\n     \r\n    getItemProps = (props: any) => props,\r\n    menuProps = {},\r\n    items,\r\n}) => {\r\n    if (!items.length) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <ul className=\"popoverList\" data-test={testId} {...menuProps}>\r\n            {items.map((item, index) => (\r\n                <li\r\n                    className={getItemClassName(highlightedIndex, index)}\r\n                    data-test={testId && `${testId}-item`}\r\n                     \r\n                    {...getItemProps({\r\n                        key: item.id,\r\n                        index,\r\n                        item,\r\n                    })}\r\n                    key={index}\r\n                >\r\n                    {item.content}\r\n                </li>\r\n            ))}\r\n        </ul>\r\n    );\r\n};\r\n\r\nfunction getItemClassName(highlightedIndex: number, index: number): string {\r\n    const classes = ['popoverList-item'];\r\n\r\n    if (highlightedIndex === index) {\r\n        classes.push('is-active');\r\n    }\r\n\r\n    return classes.join(' ');\r\n}\r\n\r\nexport default memo(PopoverList);\r\n","import Downshift, { DownshiftState, StateChangeOptions } from 'downshift';\r\nimport { includes, isNumber, noop } from 'lodash';\r\nimport React, { Fragment, PureComponent, ReactChild, ReactNode } from 'react';\r\n\r\nimport { Label } from '../form';\r\nimport { Popover, PopoverList, PopoverListItem } from '../popover';\r\n\r\nimport AutocompleteItem from './autocomplete-item';\r\n\r\nexport interface AutocompleteProps {\r\n    initialValue?: string;\r\n    initialHighlightedIndex?: number;\r\n    children?: ReactNode;\r\n    items: AutocompleteItem[];\r\n    inputProps?: any;\r\n    listTestId?: string;\r\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\r\n    onSelect?(item: AutocompleteItem | null): void;\r\n    onChange?(value: string, isOpen: boolean): void;\r\n}\r\n\r\nclass Autocomplete extends PureComponent<AutocompleteProps> {\r\n    render(): ReactNode {\r\n        const {\r\n            inputProps,\r\n            initialValue,\r\n            initialHighlightedIndex,\r\n            items,\r\n            children,\r\n            onSelect,\r\n            listTestId,\r\n        } = this.props;\r\n\r\n        return (\r\n            <Downshift\r\n                defaultHighlightedIndex={0}\r\n                initialHighlightedIndex={initialHighlightedIndex}\r\n                initialInputValue={initialValue}\r\n                itemToString={this.itemToString}\r\n                labelId={\r\n                    inputProps && inputProps['aria-labelledby']\r\n                        ? inputProps['aria-labelledby']\r\n                        : null\r\n                }\r\n                onChange={onSelect}\r\n                onStateChange={this.handleStateChange}\r\n                stateReducer={this.stateReducer}\r\n            >\r\n                {({ isOpen, getInputProps, getMenuProps, getItemProps, highlightedIndex }) => {\r\n                    const validInputProps = { ...getInputProps(), ...inputProps };\r\n\r\n                    delete validInputProps.labelText;\r\n\r\n                    return (\r\n                        <div>\r\n                            <input {...validInputProps} />\r\n                            {inputProps && includes(inputProps.className, 'floating') && (\r\n                                <Label\r\n                                    htmlFor={inputProps.id}\r\n                                    id={inputProps['aria-labelledby']}\r\n                                    isFloatingLabelEnabled={true}\r\n                                >\r\n                                    {inputProps.labelText}\r\n                                </Label>\r\n                            )}\r\n                            {isOpen && !!items.length && (\r\n                                <Popover>\r\n                                    <PopoverList\r\n                                        getItemProps={getItemProps}\r\n                                        highlightedIndex={\r\n                                            isNumber(highlightedIndex) ? highlightedIndex : -1\r\n                                        }\r\n                                        items={items.map((item) => this.toPopoverItem(item))}\r\n                                        menuProps={getMenuProps()}\r\n                                        testId={listTestId}\r\n                                    />\r\n                                    {children}\r\n                                </Popover>\r\n                            )}\r\n                        </div>\r\n                    );\r\n                }}\r\n            </Downshift>\r\n        );\r\n    }\r\n\r\n    private toPopoverItem(item: AutocompleteItem): PopoverListItem {\r\n        return {\r\n            ...item,\r\n            content: this.highlightItem(item),\r\n        };\r\n    }\r\n\r\n    private highlightItem(item: AutocompleteItem): ReactChild[] | ReactChild {\r\n        if (!item.highlightedSlices || !item.highlightedSlices.length) {\r\n            return item.label;\r\n        }\r\n\r\n        let lastIndex = 0;\r\n        let key = 0;\r\n\r\n        return item.highlightedSlices.reduce((node, slice, i) => {\r\n            const { label } = item;\r\n            const { offset, length } = slice;\r\n            const notHighlightedLength = offset - lastIndex;\r\n\r\n            if (notHighlightedLength) {\r\n                node.push(\r\n                    <Fragment key={key}>{label.substr(lastIndex, notHighlightedLength)}</Fragment>,\r\n                );\r\n                key += 1;\r\n            }\r\n\r\n            lastIndex = offset + length;\r\n\r\n            node.push(<strong key={key}>{label.substr(offset, length)}</strong>);\r\n            key += 1;\r\n\r\n            if (i === (item.highlightedSlices || []).length - 1) {\r\n                node.push(<Fragment key={key}>{label.substr(lastIndex)}</Fragment>);\r\n                key += 1;\r\n            }\r\n\r\n            return node;\r\n        }, [] as ReactChild[]);\r\n    }\r\n\r\n    private itemToString(item?: AutocompleteItem | null): string {\r\n        return (item && item.value) || '';\r\n    }\r\n\r\n    private stateReducer: (\r\n        state: DownshiftState<AutocompleteItem>,\r\n        changes: StateChangeOptions<AutocompleteItem>,\r\n    ) => Partial<StateChangeOptions<AutocompleteItem>> = (state, changes) => {\r\n        const { onChange } = this.props;\r\n\r\n        switch (changes.type) {\r\n            case Downshift.stateChangeTypes.blurInput:\r\n            case Downshift.stateChangeTypes.blurButton:\r\n            case Downshift.stateChangeTypes.mouseUp:\r\n            case Downshift.stateChangeTypes.touchEnd:\r\n                return {\r\n                    ...changes,\r\n                    inputValue: state.inputValue,\r\n                };\r\n\r\n            case Downshift.stateChangeTypes.changeInput:\r\n                if (changes.inputValue !== state.inputValue && onChange) {\r\n                    onChange(changes.inputValue || '', state.isOpen);\r\n                }\r\n\r\n                return changes;\r\n\r\n            case Downshift.stateChangeTypes.keyDownEnter:\r\n                return changes;\r\n\r\n            default:\r\n                return changes;\r\n        }\r\n    };\r\n\r\n    private handleStateChange = ({ isOpen, inputValue }: StateChangeOptions<AutocompleteItem>) => {\r\n        const { onToggleOpen = noop } = this.props;\r\n\r\n        if (isOpen !== undefined) {\r\n            onToggleOpen({ isOpen, inputValue: inputValue || '' });\r\n        }\r\n    };\r\n}\r\n\r\nexport default Autocomplete;\r\n","import { getScriptLoader, ScriptLoader } from '@bigcommerce/script-loader';\r\n\r\nimport { GoogleAutocompleteWindow, GoogleMapsSdk } from './googleAutocompleteTypes';\r\n\r\nexport default class GoogleAutocompleteScriptLoader {\r\n    private _scriptLoader: ScriptLoader;\r\n    private _googleAutoComplete?: Promise<GoogleMapsSdk>;\r\n\r\n    constructor() {\r\n        this._scriptLoader = getScriptLoader();\r\n    }\r\n\r\n    loadMapsSdk(apiKey: string): Promise<GoogleMapsSdk> {\r\n        if (this._googleAutoComplete) {\r\n            return this._googleAutoComplete;\r\n        }\r\n\r\n        this._googleAutoComplete = new Promise((resolve, reject) => {\r\n            const callbackName = 'initAutoComplete';\r\n            const params = [\r\n                'language=en',\r\n                `key=${apiKey}`,\r\n                'libraries=places',\r\n                `callback=${callbackName}`,\r\n            ].join('&');\r\n\r\n            (window as GoogleCallbackWindow)[callbackName] = () => {\r\n                if (isAutocompleteWindow(window)) {\r\n                    resolve(window.google.maps);\r\n                }\r\n\r\n                reject();\r\n            };\r\n\r\n            this._scriptLoader\r\n                .loadScript(`//maps.googleapis.com/maps/api/js?${params}`)\r\n                .catch((e) => {\r\n                    this._googleAutoComplete = undefined;\r\n                    throw e;\r\n                });\r\n        });\r\n\r\n        return this._googleAutoComplete;\r\n    }\r\n}\r\n\r\nfunction isAutocompleteWindow(window: Window): window is GoogleAutocompleteWindow {\r\n    const autocompleteWindow = window as GoogleAutocompleteWindow;\r\n\r\n    return Boolean(\r\n        autocompleteWindow.google &&\r\n            autocompleteWindow.google.maps &&\r\n            autocompleteWindow.google.maps.places,\r\n    );\r\n}\r\n\r\nexport interface GoogleCallbackWindow extends Window {\r\n    initAutoComplete?(): void;\r\n}\r\n","import GoogleAutocompleteScriptLoader from './GoogleAutocompleteScriptLoader';\r\n\r\nlet instance: GoogleAutocompleteScriptLoader;\r\n\r\nexport default function getGoogleAutocompleteScriptLoader(): GoogleAutocompleteScriptLoader {\r\n    if (!instance) {\r\n        instance = new GoogleAutocompleteScriptLoader();\r\n    }\r\n\r\n    return instance;\r\n}\r\n","import getGoogleAutocompleteScriptLoader from './getGoogleAutocompleteScriptLoader';\r\nimport GoogleAutocompleteScriptLoader from './GoogleAutocompleteScriptLoader';\r\n\r\nexport default class GoogleAutocompleteService {\r\n    private _autocompletePromise?: Promise<google.maps.places.AutocompleteService>;\r\n    private _placesPromise?: Promise<google.maps.places.PlacesService>;\r\n\r\n    constructor(\r\n        private _apiKey: string,\r\n        private _scriptLoader: GoogleAutocompleteScriptLoader = getGoogleAutocompleteScriptLoader(),\r\n    ) {}\r\n\r\n    getAutocompleteService(): Promise<google.maps.places.AutocompleteService> {\r\n        if (!this._autocompletePromise) {\r\n            this._autocompletePromise = this._scriptLoader\r\n                .loadMapsSdk(this._apiKey)\r\n                .then((googleMapsSdk) => {\r\n                    if (!googleMapsSdk.places.AutocompleteService) {\r\n                        throw new Error('`AutocompleteService` is undefined');\r\n                    }\r\n\r\n                    return new googleMapsSdk.places.AutocompleteService();\r\n                });\r\n        }\r\n\r\n        return this._autocompletePromise;\r\n    }\r\n\r\n    getPlacesServices(): Promise<google.maps.places.PlacesService> {\r\n        const node = document.createElement('div');\r\n\r\n        if (!this._placesPromise) {\r\n            this._placesPromise = this._scriptLoader\r\n                .loadMapsSdk(this._apiKey)\r\n                .then((googleMapsSdk) => {\r\n                    if (!googleMapsSdk.places.PlacesService) {\r\n                        throw new Error('`PlacesService` is undefined');\r\n                    }\r\n\r\n                    return new googleMapsSdk.places.PlacesService(node);\r\n                });\r\n        }\r\n\r\n        return this._placesPromise;\r\n    }\r\n}\r\n","import { noop } from 'lodash';\r\nimport React, { PureComponent, ReactNode } from 'react';\r\n\r\nimport { Autocomplete, AutocompleteItem } from '../../ui/autocomplete';\r\n\r\nimport { GoogleAutocompleteOptionTypes } from './googleAutocompleteTypes';\r\nimport './GoogleAutocomplete.scss';\r\nimport GoogleAutocompleteService from './GoogleAutocompleteService';\r\n\r\ninterface GoogleAutocompleteProps {\r\n    initialValue?: string;\r\n    componentRestrictions?: google.maps.places.ComponentRestrictions;\r\n    fields?: string[];\r\n    apiKey: string;\r\n    nextElement?: HTMLElement;\r\n    inputProps?: any;\r\n    isAutocompleteEnabled?: boolean;\r\n    types?: GoogleAutocompleteOptionTypes[];\r\n    onSelect?(place: google.maps.places.PlaceResult, item: AutocompleteItem): void;\r\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\r\n    onChange?(value: string, isOpen: boolean): void;\r\n}\r\n\r\ninterface GoogleAutocompleteState {\r\n    items: AutocompleteItem[];\r\n    autoComplete: string;\r\n}\r\n\r\nclass GoogleAutocomplete extends PureComponent<GoogleAutocompleteProps, GoogleAutocompleteState> {\r\n    googleAutocompleteService: GoogleAutocompleteService;\r\n\r\n    constructor(props: GoogleAutocompleteProps) {\r\n        super(props);\r\n        this.googleAutocompleteService = new GoogleAutocompleteService(props.apiKey);\r\n        this.state = {\r\n            items: [],\r\n            autoComplete: 'off',\r\n        };\r\n    }\r\n\r\n    render(): ReactNode {\r\n        const { initialValue, onToggleOpen = noop, inputProps = {} } = this.props;\r\n\r\n        const { autoComplete, items } = this.state;\r\n\r\n        return (\r\n            <Autocomplete\r\n                initialHighlightedIndex={0}\r\n                initialValue={initialValue}\r\n                inputProps={{\r\n                    ...inputProps,\r\n                    autoComplete,\r\n                }}\r\n                items={items}\r\n                listTestId=\"address-autocomplete-suggestions\"\r\n                onChange={this.onChange}\r\n                onSelect={this.onSelect}\r\n                onToggleOpen={onToggleOpen}\r\n            >\r\n                <div className=\"co-googleAutocomplete-footer\" />\r\n            </Autocomplete>\r\n        );\r\n    }\r\n\r\n    private onSelect: (item: AutocompleteItem) => void = (item) => {\r\n        const { fields, onSelect = noop, nextElement } = this.props;\r\n\r\n        this.googleAutocompleteService.getPlacesServices().then((service) => {\r\n            service.getDetails(\r\n                {\r\n                    placeId: item.id,\r\n                    fields: fields || ['address_components', 'name'],\r\n                },\r\n                (result) => {\r\n                    if (nextElement) {\r\n                        nextElement.focus();\r\n                    }\r\n\r\n                    onSelect(result, item);\r\n                },\r\n            );\r\n        });\r\n    };\r\n\r\n    private onChange: (input: string) => void = (input) => {\r\n        const { isAutocompleteEnabled, onChange = noop } = this.props;\r\n\r\n        onChange(input, false);\r\n\r\n        if (!isAutocompleteEnabled) {\r\n            return this.resetAutocomplete();\r\n        }\r\n\r\n        this.setAutocomplete(input);\r\n        this.setItems(input);\r\n    };\r\n\r\n    private setItems(input: string): void {\r\n        if (!input) {\r\n            this.setState({ items: [] });\r\n\r\n            return;\r\n        }\r\n\r\n        const { componentRestrictions, types } = this.props;\r\n\r\n        this.googleAutocompleteService.getAutocompleteService().then((service) => {\r\n            service.getPlacePredictions(\r\n                {\r\n                    input,\r\n                    types: types || ['geocode'],\r\n                    componentRestrictions,\r\n                },\r\n                (results) => this.setState({ items: this.toAutocompleteItems(results) }),\r\n            );\r\n        });\r\n    }\r\n\r\n    private resetAutocomplete(): void {\r\n        this.setState({\r\n            items: [],\r\n            autoComplete: 'off',\r\n        });\r\n    }\r\n\r\n    private setAutocomplete(input: string): void {\r\n        this.setState({\r\n            ...this.state,\r\n            autoComplete: input && input.length ? 'nope' : 'off',\r\n        });\r\n    }\r\n\r\n    private toAutocompleteItems(\r\n        results?: google.maps.places.AutocompletePrediction[],\r\n    ): AutocompleteItem[] {\r\n        return (results || []).map((result) => ({\r\n            label: result.description,\r\n            value: result.structured_formatting.main_text,\r\n            highlightedSlices: result.matched_substrings,\r\n            id: result.place_id,\r\n        }));\r\n    }\r\n}\r\n\r\nexport default GoogleAutocomplete;\r\n","import { FormField as FormFieldType } from '@bigcommerce/checkout-sdk';\r\nimport classNames from 'classnames';\r\nimport { FieldProps } from 'formik';\r\nimport React, { FunctionComponent, memo, useCallback, useMemo } from 'react';\r\n\r\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\r\n\r\nimport { AutocompleteItem } from '../../ui/autocomplete';\r\nimport { FormField, Label } from '../../ui/form';\r\nimport {\r\n    getAddressFormFieldInputId,\r\n    getAddressFormFieldLabelId,\r\n} from '../getAddressFormFieldInputId';\r\n\r\nimport GoogleAutocomplete from './GoogleAutocomplete';\r\n\r\nexport interface GoogleAutocompleteFormFieldProps {\r\n    apiKey: string;\r\n    field: FormFieldType;\r\n    countryCode?: string;\r\n    supportedCountries: string[];\r\n    nextElement?: HTMLElement;\r\n    parentFieldName?: string;\r\n    isFloatingLabelEnabled?: boolean;\r\n    onSelect(place: google.maps.places.PlaceResult, item: AutocompleteItem): void;\r\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\r\n    onChange(value: string, isOpen: boolean): void;\r\n}\r\n\r\nconst GoogleAutocompleteFormField: FunctionComponent<GoogleAutocompleteFormFieldProps> = ({\r\n    field: { default: placeholder, name },\r\n    countryCode,\r\n    supportedCountries,\r\n    parentFieldName,\r\n    nextElement,\r\n    apiKey,\r\n    onSelect,\r\n    onChange,\r\n    onToggleOpen,\r\n    isFloatingLabelEnabled,\r\n}) => {\r\n    const fieldName = parentFieldName ? `${parentFieldName}.${name}` : name;\r\n\r\n    const labelContent = useMemo(() => <TranslatedString id=\"address.address_line_1_label\" />, []);\r\n\r\n    const labelId = getAddressFormFieldLabelId(name);\r\n\r\n    const inputProps = useMemo(\r\n        () => ({\r\n            className: classNames(\r\n                'form-input optimizedCheckout-form-input',\r\n                { 'floating-input': isFloatingLabelEnabled },\r\n            ),\r\n            id: getAddressFormFieldInputId(name),\r\n            'aria-labelledby': labelId,\r\n            placeholder: isFloatingLabelEnabled ? ' ' : placeholder,\r\n            labelText: isFloatingLabelEnabled ? labelContent : null,\r\n        }),\r\n        [name, labelId, placeholder, labelContent],\r\n    );\r\n\r\n    const renderInput = useCallback(\r\n        ({ field }: FieldProps) => (\r\n            <GoogleAutocomplete\r\n                apiKey={apiKey}\r\n                componentRestrictions={countryCode ? { country: countryCode } : undefined}\r\n                initialValue={field.value}\r\n                inputProps={inputProps}\r\n                isAutocompleteEnabled={\r\n                    countryCode ? supportedCountries.indexOf(countryCode) > -1 : false\r\n                }\r\n                nextElement={nextElement}\r\n                onChange={onChange}\r\n                onSelect={onSelect}\r\n                onToggleOpen={onToggleOpen}\r\n            />\r\n        ),\r\n        [\r\n            apiKey,\r\n            countryCode,\r\n            inputProps,\r\n            nextElement,\r\n            onChange,\r\n            onSelect,\r\n            onToggleOpen,\r\n            supportedCountries,\r\n        ],\r\n    );\r\n\r\n    const renderLabel = isFloatingLabelEnabled ? null : (\r\n        <Label htmlFor={inputProps.id} id={labelId} isFloatingLabelEnabled={isFloatingLabelEnabled}>\r\n            {labelContent}\r\n        </Label>\r\n    );\r\n\r\n    return (\r\n        <div className={classNames(\r\n                'dynamic-form-field dynamic-form-field--addressLineAutocomplete',\r\n                { 'floating-form-field': isFloatingLabelEnabled },\r\n            )}\r\n        >\r\n            <FormField\r\n                input={renderInput}\r\n                isFloatingLabelEnabled={isFloatingLabelEnabled}\r\n                label={renderLabel}\r\n                name={fieldName}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default memo(GoogleAutocompleteFormField);\r\n","import { Address, Country, FormField } from '@bigcommerce/checkout-sdk';\r\nimport { memoize } from '@bigcommerce/memoize';\r\nimport { forIn, noop } from 'lodash';\r\nimport React, { Component, createRef, ReactNode, RefObject } from 'react';\r\n\r\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\r\n\r\nimport { AutocompleteItem } from '../ui/autocomplete';\r\nimport { DynamicFormField, DynamicFormFieldType, Fieldset } from '../ui/form';\r\n\r\nimport { AddressKeyMap } from './address';\r\nimport './AddressForm.scss';\r\nimport {\r\n  getAddressFormFieldInputId,\r\n  getAddressFormFieldLegacyName,\r\n} from './getAddressFormFieldInputId';\r\nimport { GoogleAutocompleteFormField, mapToAddress } from './googleAutocomplete';\r\n\r\nexport interface AddressFormProps {\r\n  fieldName?: string;\r\n  countryCode?: string;\r\n  countriesWithAutocomplete?: string[];\r\n  countries?: Country[];\r\n  formFields: FormField[];\r\n  googleMapsApiKey?: string;\r\n  shouldShowSaveAddress?: boolean;\r\n  isFloatingLabelEnabled?: boolean;\r\n  onAutocompleteSelect?(address: Partial<Address>): void;\r\n  onAutocompleteToggle?(state: { inputValue: string; isOpen: boolean }): void;\r\n  onChange?(fieldName: string, value: string | string[]): void;\r\n  setFieldValue?(fieldName: string, value: string | string[]): void;\r\n}\r\n\r\nconst LABEL: AddressKeyMap = {\r\n  address1: 'address.address_line_1_label',\r\n  address2: 'address.address_line_2_label',\r\n  city: 'address.city_label',\r\n  company: 'address.company_name_label',\r\n  countryCode: 'address.country_label',\r\n  firstName: 'address.first_name_label',\r\n  lastName: 'address.last_name_label',\r\n  phone: 'address.phone_number_label',\r\n  postalCode: 'address.postal_code_label',\r\n  stateOrProvince: 'address.state_label',\r\n  stateOrProvinceCode: 'address.state_label',\r\n};\r\n\r\nconst AUTOCOMPLETE: AddressKeyMap = {\r\n  address1: 'address-line1',\r\n  address2: 'address-line2',\r\n  city: 'address-level2',\r\n  company: 'organization',\r\n  countryCode: 'country',\r\n  firstName: 'given-name',\r\n  lastName: 'family-name',\r\n  phone: 'tel',\r\n  postalCode: 'postal-code',\r\n  stateOrProvince: 'address-level1',\r\n  stateOrProvinceCode: 'address-level1',\r\n};\r\n\r\nconst PLACEHOLDER: AddressKeyMap = {\r\n  countryCode: 'address.select_country_action',\r\n  stateOrProvince: 'address.select_state_action',\r\n  stateOrProvinceCode: 'address.select_state_action',\r\n};\r\n\r\nconst AUTOCOMPLETE_FIELD_NAME = 'address1';\r\n\r\nclass AddressForm extends Component<AddressFormProps & WithLanguageProps> {\r\n  private containerRef: RefObject<HTMLElement> = createRef();\r\n  private nextElement?: HTMLElement | null;\r\n\r\n  private handleDynamicFormFieldChange: (name: string) => (value: string | string[]) => void =\r\n    memoize((name) => (value) => {\r\n      this.syncNonFormikValue(name, value);\r\n    });\r\n\r\n  componentDidMount(): void {\r\n    const { current } = this.containerRef;\r\n\r\n    if (current) {\r\n      this.nextElement = current.querySelector<HTMLElement>('[autocomplete=\"address-line2\"]');\r\n    }\r\n  }\r\n\r\n  render(): ReactNode {\r\n    const {\r\n      formFields,\r\n      fieldName,\r\n      countriesWithAutocomplete,\r\n      countryCode,\r\n      googleMapsApiKey,\r\n      onAutocompleteToggle,\r\n      isFloatingLabelEnabled,\r\n    } = this.props;\r\n\r\n    return (\r\n      <>\r\n        <Fieldset>\r\n          <div className=\"checkout-address\" ref={this.containerRef as RefObject<HTMLDivElement>}>\r\n            {formFields.map((field) => {\r\n              const addressFieldName = field.name;\r\n              const translatedPlaceholderId = PLACEHOLDER[addressFieldName];\r\n\r\n              if (\r\n                addressFieldName === 'address1' &&\r\n                googleMapsApiKey &&\r\n                countriesWithAutocomplete\r\n              ) {\r\n                return (\r\n                  <GoogleAutocompleteFormField\r\n                    apiKey={googleMapsApiKey}\r\n                    countryCode={countryCode}\r\n                    field={field}\r\n                    isFloatingLabelEnabled={isFloatingLabelEnabled}\r\n                    key={field.id}\r\n                    nextElement={this.nextElement || undefined}\r\n                    onChange={this.handleAutocompleteChange}\r\n                    onSelect={this.handleAutocompleteSelect}\r\n                    onToggleOpen={onAutocompleteToggle}\r\n                    parentFieldName={fieldName}\r\n                    supportedCountries={countriesWithAutocomplete}\r\n                  />\r\n                );\r\n              }\r\n\r\n              return (\r\n                <DynamicFormField\r\n                  autocomplete={AUTOCOMPLETE[field.name]}\r\n                  extraClass={`dynamic-form-field--${getAddressFormFieldLegacyName(\r\n                    addressFieldName,\r\n                  )}`}\r\n                  field={field}\r\n                  inputId={getAddressFormFieldInputId(addressFieldName)}\r\n                  // stateOrProvince can sometimes be a dropdown or input, so relying on id is not sufficient\r\n                  isFloatingLabelEnabled={isFloatingLabelEnabled}\r\n                  key={`${field.id}-${field.name}`}\r\n                  label={\r\n                    field.custom || field.label ? (\r\n                      field.label\r\n                    ) : (\r\n                      <TranslatedString id={LABEL[field.name]} />\r\n                    )\r\n                  }\r\n                  onChange={this.handleDynamicFormFieldChange(addressFieldName)}\r\n                  parentFieldName={\r\n                    field.custom\r\n                      ? fieldName\r\n                        ? `${fieldName}.customFields`\r\n                        : 'customFields'\r\n                      : fieldName\r\n                  }\r\n                  placeholder={this.getPlaceholderValue(field, translatedPlaceholderId)}\r\n                />\r\n              );\r\n            })}\r\n          </div>\r\n        </Fieldset>\r\n      </>\r\n    );\r\n  }\r\n\r\n  private getPlaceholderValue(field: FormField, translatedPlaceholderId: string): string {\r\n    const { language } = this.props;\r\n\r\n    if (field.default && field.fieldType !== 'dropdown') {\r\n      return field.default;\r\n    }\r\n\r\n    return translatedPlaceholderId && language.translate(translatedPlaceholderId);\r\n  }\r\n\r\n  private handleAutocompleteChange: (value: string, isOpen: boolean) => void = (value, isOpen) => {\r\n    if (!isOpen) {\r\n      this.syncNonFormikValue(AUTOCOMPLETE_FIELD_NAME, value);\r\n    }\r\n  };\r\n\r\n  private handleAutocompleteSelect: (\r\n    place: google.maps.places.PlaceResult,\r\n    item: AutocompleteItem,\r\n  ) => void = (place, { value: autocompleteValue }) => {\r\n    const { countries, setFieldValue = noop, onChange = noop } = this.props;\r\n\r\n    const address = mapToAddress(place, countries);\r\n\r\n    forIn(address, (value, fieldName) => {\r\n      setFieldValue(fieldName, value as string);\r\n      onChange(fieldName, value as string);\r\n    });\r\n\r\n    if (autocompleteValue) {\r\n      this.syncNonFormikValue(AUTOCOMPLETE_FIELD_NAME, autocompleteValue);\r\n    }\r\n  };\r\n\r\n  // because autocomplete state is controlled by Downshift, we need to manually keep formik\r\n  // value in sync when autocomplete value changes\r\n  private syncNonFormikValue: (fieldName: string, value: string | string[]) => void = (\r\n    fieldName,\r\n    value,\r\n  ) => {\r\n    const { formFields, setFieldValue = noop, onChange = noop } = this.props;\r\n\r\n    const dateFormFieldNames = formFields\r\n      .filter((field) => field.custom && field.fieldType === DynamicFormFieldType.date)\r\n      .map((field) => field.name);\r\n\r\n    if (fieldName === AUTOCOMPLETE_FIELD_NAME || dateFormFieldNames.indexOf(fieldName) > -1) {\r\n      setFieldValue(fieldName, value);\r\n    }\r\n\r\n    onChange(fieldName, value);\r\n  };\r\n}\r\n\r\nexport default withLanguage(AddressForm);\r\n","import { Address, Country, Region } from '@bigcommerce/checkout-sdk';\r\n\r\nimport AddressSelectorFactory from './AddressSelectorFactory';\r\n\r\nexport default function mapToAddress(\r\n    autocompleteData: google.maps.places.PlaceResult,\r\n    countries: Country[] = [],\r\n): Partial<Address> {\r\n    if (!autocompleteData || !autocompleteData.address_components) {\r\n        return {};\r\n    }\r\n\r\n    const accessor = AddressSelectorFactory.create(autocompleteData);\r\n    const state = accessor.getState();\r\n    const countryCode = accessor.getCountry();\r\n    const country = countries && countries.find((c) => countryCode === c.code);\r\n    const street2 = accessor.getStreet2();\r\n\r\n    return {\r\n        address2: street2,\r\n        city: accessor.getCity(),\r\n        countryCode,\r\n        postalCode: accessor.getPostCode(),\r\n        ...(state ? getState(state, country && country.subdivisions) : {}),\r\n    };\r\n}\r\n\r\nfunction getState(stateName: string, states: Region[] = []): Partial<Address> {\r\n    const state = states.find(({ code, name }: Region) => code === stateName || name === stateName);\r\n\r\n    if (!state) {\r\n        return {\r\n            stateOrProvince: !states.length ? stateName : '',\r\n            stateOrProvinceCode: '',\r\n        };\r\n    }\r\n\r\n    return {\r\n        stateOrProvince: state.name,\r\n        stateOrProvinceCode: state.code,\r\n    };\r\n}\r\n","import React, { FunctionComponent, useState } from 'react';\r\n\r\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\r\n\r\nimport { preventDefault } from '../common/dom';\r\n\r\nimport { AddressSelectProps } from './AddressSelect';\r\nimport StaticAddress from './StaticAddress';\r\n\r\ntype AddressSelectButtonProps = Pick<AddressSelectProps, 'selectedAddress' | 'addresses'>;\r\n\r\nconst AddressSelectButton: FunctionComponent<AddressSelectButtonProps & WithLanguageProps> = ({\r\n    selectedAddress,\r\n    language,\r\n}) => {\r\n    const [ariaExpanded, setAriaExpanded] = useState(false);\r\n\r\n    return (\r\n        <a\r\n            aria-controls=\"addressDropdown\"\r\n            aria-description={language.translate('address.enter_or_select_address_action')}\r\n            aria-expanded={ariaExpanded}\r\n            className=\"button dropdown-button dropdown-toggle--select\"\r\n            href=\"#\"\r\n            id=\"addressToggle\"\r\n            onClick={preventDefault(() => setAriaExpanded(!ariaExpanded))}\r\n        >\r\n            {selectedAddress ? (\r\n                <StaticAddress address={selectedAddress} />\r\n            ) : (\r\n                <TranslatedString id=\"address.enter_address_action\" />\r\n            )}\r\n        </a>\r\n    );\r\n};\r\n\r\nexport default withLanguage(AddressSelectButton);\r\n","import { Address, CustomerAddress } from '@bigcommerce/checkout-sdk';\r\nimport React, { FunctionComponent, memo, PureComponent, ReactNode } from 'react';\r\n\r\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\r\n\r\nimport { preventDefault } from '../common/dom';\r\nimport { DropdownTrigger } from '../ui/dropdown';\r\n\r\nimport isEqualAddress from './isEqualAddress';\r\nimport './AddressSelect.scss';\r\nimport AddressSelectButton from './AddressSelectButton';\r\nimport StaticAddress from './StaticAddress';\r\n\r\nexport interface AddressSelectProps {\r\n    addresses: CustomerAddress[];\r\n    selectedAddress?: Address;\r\n    onSelectAddress(address: Address): void;\r\n    onUseNewAddress(currentAddress?: Address): void;\r\n}\r\n\r\nclass AddressSelect extends PureComponent<AddressSelectProps> {\r\n    render(): ReactNode {\r\n        const { addresses, selectedAddress } = this.props;\r\n\r\n        return (\r\n            <div className=\"form-field\">\r\n                <div className=\"dropdown--select\">\r\n                    <DropdownTrigger\r\n                        dropdown={\r\n                            <AddressSelectMenu\r\n                                addresses={addresses}\r\n                                onSelectAddress={this.handleSelectAddress}\r\n                                onUseNewAddress={this.handleUseNewAddress}\r\n                                selectedAddress={selectedAddress}\r\n                            />\r\n                        }\r\n                    >\r\n                        <AddressSelectButton\r\n                            addresses={addresses}\r\n                            selectedAddress={selectedAddress}\r\n                        />\r\n                    </DropdownTrigger>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private handleSelectAddress: (newAddress: Address) => void = (newAddress: Address) => {\r\n        const { onSelectAddress, selectedAddress } = this.props;\r\n\r\n        if (!isEqualAddress(selectedAddress, newAddress)) {\r\n            onSelectAddress(newAddress);\r\n        }\r\n    };\r\n\r\n    private handleUseNewAddress: () => void = () => {\r\n        const { selectedAddress, onUseNewAddress } = this.props;\r\n\r\n        onUseNewAddress(selectedAddress);\r\n    };\r\n}\r\n\r\nconst AddressSelectMenu: FunctionComponent<AddressSelectProps> = ({\r\n    addresses,\r\n    onSelectAddress,\r\n    onUseNewAddress,\r\n    selectedAddress,\r\n}) => (\r\n    <ul className=\"dropdown-menu instrumentSelect-dropdownMenu\" id=\"addressDropdown\">\r\n        <li className=\"dropdown-menu-item dropdown-menu-item--select\">\r\n            <a\r\n                data-test=\"add-new-address\"\r\n                href=\"#\"\r\n                onClick={preventDefault(() => onUseNewAddress(selectedAddress))}\r\n            >\r\n                <TranslatedString id=\"address.enter_address_action\" />\r\n            </a>\r\n        </li>\r\n        {addresses.map((address) => (\r\n            <li className=\"dropdown-menu-item dropdown-menu-item--select\" key={address.id}>\r\n                <a href=\"#\" onClick={preventDefault(() => onSelectAddress(address))}>\r\n                    <StaticAddress address={address} />\r\n                </a>\r\n            </li>\r\n        ))}\r\n    </ul>\r\n);\r\n\r\nexport default memo(AddressSelect);\r\n","import {\r\n    Address,\r\n    AddressRequestBody,\r\n    BillingAddress,\r\n    CustomerAddress,\r\n} from '@bigcommerce/checkout-sdk';\r\nimport { isEqual, omit } from 'lodash';\r\n\r\ntype ComparableAddress = CustomerAddress | Address | BillingAddress | AddressRequestBody;\r\ntype ComparableAddressFields = keyof CustomerAddress | keyof Address | keyof BillingAddress;\r\n\r\nexport default function isEqualAddress(\r\n    address1?: ComparableAddress,\r\n    address2?: ComparableAddress,\r\n): boolean {\r\n    if (!address1 || !address2) {\r\n        return false;\r\n    }\r\n\r\n    return (\r\n        isEqual(normalizeAddress(address1), normalizeAddress(address2)) &&\r\n        isSameState(address1, address2)\r\n    );\r\n}\r\n\r\nfunction isSameState(address1: ComparableAddress, address2: ComparableAddress): boolean {\r\n    if (address1.stateOrProvince && address1.stateOrProvince === address2.stateOrProvince) {\r\n        return true;\r\n    }\r\n\r\n    if (\r\n        address1.stateOrProvinceCode &&\r\n        address1.stateOrProvinceCode === address2.stateOrProvinceCode\r\n    ) {\r\n        return true;\r\n    }\r\n\r\n    return (\r\n        address1.stateOrProvince === address2.stateOrProvince &&\r\n        address1.stateOrProvinceCode === address2.stateOrProvinceCode\r\n    );\r\n}\r\n\r\nfunction normalizeAddress(address: ComparableAddress) {\r\n    const ignoredFields: ComparableAddressFields[] = [\r\n        'id',\r\n        'shouldSaveAddress',\r\n        'stateOrProvince',\r\n        'stateOrProvinceCode',\r\n        'type',\r\n        'email',\r\n        'country',\r\n    ];\r\n\r\n    return omit(\r\n        {\r\n            ...address,\r\n            customFields: (address.customFields || []).filter(({ fieldValue }) => !!fieldValue),\r\n        },\r\n        ignoredFields,\r\n    );\r\n}\r\n","import { Address, CustomerAddress, FormField } from '@bigcommerce/checkout-sdk';\r\nimport { some } from 'lodash';\r\n\r\nimport isEqualAddress from './isEqualAddress';\r\nimport isValidAddress from './isValidAddress';\r\n\r\nexport default function isValidCustomerAddress(\r\n    address: Address | undefined,\r\n    addresses: CustomerAddress[],\r\n    formFields: FormField[],\r\n): boolean {\r\n    if (!address || !isValidAddress(address, formFields)) {\r\n        return false;\r\n    }\r\n\r\n    return some(addresses, (customerAddress) => isEqualAddress(customerAddress, address));\r\n}\r\n","import { Address } from '@bigcommerce/checkout-sdk';\r\n\r\nimport { mapCustomFormFieldsFromFormValues } from '../formFields';\r\n\r\nimport { AddressFormValues } from './mapAddressToFormValues';\r\n\r\nexport default function mapAddressFromFormValues(formValues: AddressFormValues): Address {\r\n    const { customFields, ...address } = formValues;\r\n    const shouldSaveAddress = formValues.shouldSaveAddress;\r\n\r\n    return {\r\n        ...address,\r\n        shouldSaveAddress,\r\n        customFields: mapCustomFormFieldsFromFormValues(customFields),\r\n    };\r\n}\r\n","import { FieldProps } from 'formik';\r\nimport React, { FunctionComponent, useCallback, useMemo } from 'react';\r\n\r\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\r\n\r\nimport { Fieldset, FormField, Label, Legend, TextInput } from '../ui/form';\r\n\r\nconst OrderComments: FunctionComponent = () => {\r\n    const renderLabel = useCallback(\r\n        (name) => (\r\n            <Label hidden htmlFor={name}>\r\n                <TranslatedString id=\"shipping.order_comment_label\" />\r\n            </Label>\r\n        ),\r\n        [],\r\n    );\r\n\r\n    const renderInput = useCallback(\r\n        ({ field }: FieldProps) => <TextInput {...field} autoComplete=\"off\" maxLength={2000} />,\r\n        [],\r\n    );\r\n\r\n    const legend = useMemo(\r\n        () => (\r\n            <Legend>\r\n                <TranslatedString id=\"shipping.order_comment_label\" />\r\n            </Legend>\r\n        ),\r\n        [],\r\n    );\r\n\r\n    return (\r\n        <Fieldset legend={legend} testId=\"checkout-shipping-comments\">\r\n            <FormField input={renderInput} label={renderLabel} name=\"orderComment\" />\r\n        </Fieldset>\r\n    );\r\n};\r\n\r\nexport default OrderComments;\r\n","import { Checkout, CheckoutPayment } from '@bigcommerce/checkout-sdk';\r\n\r\nimport { isGiftCertificatePayment } from '../giftCertificate';\r\n\r\nimport { isStoreCreditPayment } from './storeCredit';\r\n\r\nexport default function getPreselectedPayment(checkout: Checkout): CheckoutPayment | undefined {\r\n    const payments = checkout && checkout.payments ? checkout.payments : [];\r\n\r\n    return payments.find(\r\n        (payment) =>\r\n            !isGiftCertificatePayment(payment) &&\r\n            !isStoreCreditPayment(payment) &&\r\n            !!payment.providerId,\r\n    );\r\n}\r\n","import { Cart } from '@bigcommerce/checkout-sdk';\r\n\r\nimport getLineItemsCount from './getLineItemsCount';\r\n\r\nexport default function getShippableItemsCount(cart: Cart): number {\r\n    return getLineItemsCount(cart.lineItems.physicalItems.filter((item) => !item.addedByPromotion));\r\n}\r\n","import { Placement } from 'popper.js';\r\nimport React, { Component, MouseEventHandler, ReactNode } from 'react';\r\nimport { Manager, Popper, Reference } from 'react-popper';\r\n\r\nimport {\r\n    CHECKOUT_ROOT_NODE_ID,\r\n    MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID,\r\n} from '@bigcommerce/checkout/payment-integration-api';\r\n\r\nexport interface DropdownTriggerProps {\r\n    placement?: Placement;\r\n    dropdown: ReactNode;\r\n}\r\n\r\nexport interface DropdownTriggerState {\r\n    shouldShow: boolean;\r\n}\r\n\r\nexport default class DropdownTrigger extends Component<DropdownTriggerProps, DropdownTriggerState> {\r\n    static defaultProps = {\r\n        placement: 'bottom-start',\r\n    };\r\n\r\n    state: Readonly<DropdownTriggerState> = {\r\n        shouldShow: false,\r\n    };\r\n\r\n    componentWillUnmount(): void {\r\n        document.removeEventListener('click', this.handleClose);\r\n    }\r\n\r\n    render() {\r\n        const { children, placement, dropdown } = this.props;\r\n        const { shouldShow } = this.state;\r\n\r\n        return (\r\n            <Manager>\r\n                <Reference>\r\n                    {({ ref }) => (\r\n                        <div className=\"dropdownTrigger\" onClick={this.handleClick} ref={ref}>\r\n                            {children}\r\n                        </div>\r\n                    )}\r\n                </Reference>\r\n\r\n                <Popper\r\n                    modifiers={{\r\n                        hide: { enabled: false },\r\n                        flip: { enabled: false },\r\n                        preventOverflow: { enabled: false },\r\n                    }}\r\n                    placement={placement}\r\n                >\r\n                    {({ ref, style }) =>\r\n                        !shouldShow ? null : (\r\n                            <div\r\n                                className=\"dropdownMenu\"\r\n                                ref={ref}\r\n                                style={{\r\n                                    ...style,\r\n                                    width: '100%',\r\n                                    zIndex: 1,\r\n                                }}\r\n                            >\r\n                                {dropdown}\r\n                            </div>\r\n                        )\r\n                    }\r\n                </Popper>\r\n            </Manager>\r\n        );\r\n    }\r\n\r\n    private handleClick: MouseEventHandler<HTMLElement> = (event) => {\r\n        const { shouldShow } = this.state;\r\n\r\n        if (shouldShow) {\r\n            this.handleClose(event.nativeEvent);\r\n        } else {\r\n            this.handleOpen(event.nativeEvent);\r\n        }\r\n    };\r\n\r\n    private handleOpen: (event: MouseEvent) => void = () => {\r\n        const { shouldShow } = this.state;\r\n\r\n        if (shouldShow) {\r\n            return;\r\n        }\r\n\r\n        this.setState({ shouldShow: true }, () => {\r\n            this.getRootElement()?.addEventListener('click', this.handleClose);\r\n        });\r\n    };\r\n\r\n    private handleClose: (event: MouseEvent) => void = () => {\r\n        const { shouldShow } = this.state;\r\n\r\n        if (!shouldShow) {\r\n            return;\r\n        }\r\n\r\n        this.setState({ shouldShow: false }, () => {\r\n            this.getRootElement()?.removeEventListener('click', this.handleClose);\r\n        });\r\n    };\r\n\r\n    private getRootElement() {\r\n        return (\r\n            document.getElementById(CHECKOUT_ROOT_NODE_ID) ||\r\n            document.getElementById(MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID)\r\n        );\r\n    }\r\n}\r\n","export const CHECKOUT_ROOT_NODE_ID = 'checkout-app';\r\nexport const MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID = 'micro-app-ng-checkout';\r\n"],"names":["ADDRESS_FIELD_IDS","address1","address2","postalCode","stateOrProvince","stateOrProvinceCode","getAddressFormFieldLegacyName","name","getAddressFormFieldInputId","googlePlace","address_components","this","_name","_address","getState","_get","getStreet","getStreet2","getCountry","getCity","getPostCode","type","access","element","find","field","types","indexOf","create","autocompleteData","addressSelector","children","className","getItemClassName","highlightedIndex","index","classes","push","join","memo","testId","getItemProps","props","menuProps","items","length","map","item","key","id","content","stateReducer","state","changes","onChange","inputValue","isOpen","handleStateChange","onToggleOpen","noop","undefined","render","inputProps","initialValue","initialHighlightedIndex","onSelect","listTestId","defaultHighlightedIndex","initialInputValue","itemToString","labelId","onStateChange","getInputProps","getMenuProps","validInputProps","labelText","includes","Label","htmlFor","isFloatingLabelEnabled","isNumber","toPopoverItem","highlightItem","highlightedSlices","label","lastIndex","reduce","node","slice","i","offset","notHighlightedLength","Fragment","substr","value","PureComponent","_scriptLoader","getScriptLoader","loadMapsSdk","apiKey","_googleAutoComplete","Promise","resolve","reject","callbackName","params","window","autocompleteWindow","Boolean","google","maps","places","isAutocompleteWindow","loadScript","catch","e","instance","_apiKey","getAutocompleteService","_autocompletePromise","then","googleMapsSdk","AutocompleteService","Error","getPlacesServices","document","createElement","_placesPromise","PlacesService","fields","nextElement","googleAutocompleteService","service","getDetails","placeId","result","focus","input","isAutocompleteEnabled","resetAutocomplete","setAutocomplete","setItems","autoComplete","componentRestrictions","getPlacePredictions","results","setState","toAutocompleteItems","description","structured_formatting","main_text","matched_substrings","place_id","placeholder","countryCode","supportedCountries","parentFieldName","fieldName","labelContent","useMemo","TranslatedString","getAddressFormFieldLabelId","renderInput","useCallback","country","renderLabel","FormField","LABEL","city","company","firstName","lastName","phone","AUTOCOMPLETE","PLACEHOLDER","AUTOCOMPLETE_FIELD_NAME","containerRef","createRef","handleDynamicFormFieldChange","memoize","syncNonFormikValue","handleAutocompleteChange","handleAutocompleteSelect","place","autocompleteValue","countries","setFieldValue","address","accessor","c","code","street2","stateName","states","subdivisions","mapToAddress","forIn","formFields","dateFormFieldNames","filter","custom","fieldType","DynamicFormFieldType","componentDidMount","current","querySelector","countriesWithAutocomplete","googleMapsApiKey","onAutocompleteToggle","Fieldset","ref","addressFieldName","translatedPlaceholderId","DynamicFormField","autocomplete","extraClass","inputId","getPlaceholderValue","language","default","translate","Component","withLanguage","AddressForm","selectedAddress","useState","ariaExpanded","setAriaExpanded","href","onClick","preventDefault","StaticAddress","handleSelectAddress","newAddress","onSelectAddress","isEqualAddress","handleUseNewAddress","onUseNewAddress","addresses","DropdownTrigger","dropdown","AddressSelectMenu","AddressSelect","isEqual","normalizeAddress","isSameState","omit","customFields","isValidCustomerAddress","some","customerAddress","mapAddressFromFormValues","formValues","shouldSaveAddress","hidden","maxLength","legend","getPreselectedPayment","checkout","payments","payment","providerId","getShippableItemsCount","cart","lineItems","physicalItems","addedByPromotion","shouldShow","handleClick","event","handleClose","nativeEvent","handleOpen","getRootElement","addEventListener","removeEventListener","componentWillUnmount","placement","modifiers","hide","enabled","flip","preventOverflow","style","width","zIndex","getElementById","defaultProps","CHECKOUT_ROOT_NODE_ID","MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID"],"sourceRoot":""}