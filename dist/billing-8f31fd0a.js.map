{"version":3,"file":"billing-8f31fd0a.js","mappings":"oaAsDA,yE,OAIE,EAAAA,MAA0B,CACxBC,oBAAoB,GAGd,EAAAC,gBAAiD,IAAAC,aAyHjD,EAAAC,oBAA2D,SAAOC,GAAO,kD,6EACzE,EAAsCC,KAAKC,MAAzCC,EAAa,gBAAEC,EAAgB,mBAEvCH,KAAKI,SAAS,CAAET,oBAAoB,I,iBAGlC,O,uBAAA,GAAMO,EAAcH,I,cAApB,S,0CAEqBM,OACnBF,EAAiB,G,oBAGnBH,KAAKI,SAAS,CAAET,oBAAoB,I,6BAIhC,EAAAW,oBAAkC,WACxC,EAAKR,oBAAoB,CAAC,EAC5B,E,CACF,QApJ0B,oBAUxB,YAAAS,OAAA,WACQ,MAaFP,KAAKC,MAZPO,EAAgB,mBAChBC,EAAc,iBACdC,EAAyB,4BACzB,IAAAC,SAAYC,EAAS,YAAEC,EAAO,UAC9BC,EAAS,YACTC,EAAS,YACTC,EAAU,aACVC,EAAa,gBACbC,EAAuB,0BACvBC,EAAM,SACNC,EAAQ,WACRC,EAAsB,yBAGlBC,EAAyC,cAAbF,EAC5BG,EAAgBT,EAAUK,EAAOK,aACjCC,EAAmBF,EAAcG,QAAO,SAAC,GAAe,OAAP,QAAO,IACxDC,EAAsBF,EAAiBG,OAAS,EAChDC,EACJP,GAA6BK,EAAsBF,EAAmBF,EAChE5B,EAAuBK,KAAKN,MAAK,mBACnCoC,EAAelB,GAAaA,EAAUgB,OAAS,EAC/CG,EACJtB,IACA,EAAAuB,EAAA,GAAuBvB,EAAgBG,EAAWE,EAAUL,EAAee,cAE7E,OACE,gBAACS,EAAA,EAAI,CAACC,aAAa,MAChBZ,GAA6Bb,GAC5B,uBAAK0B,UAAU,iBACb,gBAACC,EAAA,EAAoB,CAACrC,QAASU,KAInC,gBAAC4B,EAAA,EAAQ,CAACC,GAAG,yBAAyBC,IAAKvC,KAAKJ,gBAC7CkC,IAAiBR,GAChB,gBAACe,EAAA,EAAQ,CAACC,GAAG,oBACX,gBAACE,EAAA,EAAc,CAACC,UAAW9C,GACzB,gBAAC+C,EAAA,EAAa,CACZ9B,UAAWA,EACX+B,gBAAiB3C,KAAKF,oBACtB8C,gBAAiB5C,KAAKM,oBACtBuC,gBAAiBd,EAA0BtB,OAAiBqC,OAMlEf,GACA,gBAACgB,EAAA,EAAmB,CAACN,UAAW9C,GAC9B,gBAACqD,EAAA,EAAW,CACVjC,UAAWA,EACXL,0BAA2BA,EAC3Bc,YAAaL,EAAOK,YACpByB,WAAYpB,EACTqB,KAAI,SAACC,GACJ,MAAe,cAAXA,EAAEC,MACG,gCAAKD,GAAC,CAAEE,MAAO,uBAGT,aAAXF,EAAEC,MACG,gCAAKD,GAAC,CAAEE,MAAO,sBAGT,aAAXF,EAAEC,MACG,gCAAKD,GAAC,CAAEE,MAAO,sBAGT,aAAXF,EAAEC,MACG,gCAAKD,GAAC,CAAEE,MAAO,sBAGT,SAAXF,EAAEC,MACG,gCAAKD,GAAC,CAAEE,MAAO,iBAGT,gBAAXF,EAAEC,MACG,gCAAKD,GAAC,CAAEE,MAAO,oBAGT,wBAAXF,EAAEC,MACG,gCAAKD,GAAC,CAAEE,MAAO,2BAGT,eAAXF,EAAEC,MACG,gCAAKD,GAAC,CAAEE,MAAO,wBAGjBF,CACT,IACCzB,QAAO,SAACyB,GAAM,OAA0C,IAA1C,CAAC,UAAW,SAASG,QAAQH,EAAEC,KAA/B,IACjB5C,iBAAkBA,EAClBa,uBAAwBA,EACxBJ,cAAeA,EACfsC,uBAAwB1C,MAM/BK,GAA2B,gBAACsC,EAAA,EAAa,MAE1C,uBAAKrB,UAAU,gBACb,gBAACsB,EAAA,GAAM,CACLC,SAAU1C,GAAcrB,EACxB2C,GAAG,4BACHG,UAAWzB,GAAcrB,EACzBgE,KAAK,SACLC,QAASH,EAAA,YAET,gBAACI,EAAA,EAAgB,CAACvB,GAAG,6BAK/B,EAqBF,EApJA,CAA0B,EAAAwB,eAsJ1B,SAAe,EAAAC,EAAA,IACb,IAAAC,YAAoE,CAClEC,aAAc,SAAC9C,EAAQ,IACrB+C,EADwC,kBAC/B/C,EACX,EACAgD,iBAAkB,SAAC,G,IAAErD,EAAS,YAAEsD,EAAe,kBAAE3D,EAAc,iBAAO,OAAC,iCAClE,EAAA4D,EAAA,GACDvD,EAAUL,GAAkBA,EAAee,aAC3Cf,IACD,CACD6D,aAAcF,GALsD,EAOtEG,eAAgB,SAAC,G,IAAE9D,EAAc,iBAAEK,EAAS,YAAE0D,EAAQ,WACpD,QAAE/D,IACF,EAAAgE,EAAA,GAAqC,CACnCD,SAAQ,EACRvB,WAAYnC,EAAUL,EAAee,eACpCkD,YAAYjE,EAJf,EAKFkE,iBAAkB,SAAC,G,IAAEH,EAAQ,WAAE1D,EAAS,YACtC,MAAa,cADmC,YAE5C,SAAiC,SAACK,GAChC,SAAAyD,EAAA,GAAoC,CAClCC,WAAW,OAAyBL,GACpCvB,WAAYnC,EAAUK,GAAUA,EAAOK,cAFzC,KAKF,SAAiC,SAACL,GAChC,SAAAsD,EAAA,GAAqC,CACnCD,SAAQ,EACRvB,WAAYnC,EAAUK,GAAUA,EAAOK,cAFzC,GARN,EAaFsD,oBAAoB,GA/BtB,CAgCGC,I,eCzOU,SAASC,EAAmBC,GACvC,IACMC,GAAqB,EAAAC,EAAA,GAAsBF,GAEjD,OAAOC,GAHoB,CAAC,aAGoB5B,QAAQ4B,EAAmBE,aAAe,EACpFF,EAAmBE,gBACnBtC,CACV,CCmCA,6E,OAmCY,EAAAmB,aAAoD,SAAO,GAGlE,kD,wBAFGK,EAAY,eACTe,GAAa,cAF+C,kB,iEAIzD,EAOFrF,KAAKC,MANLC,EAAa,gBACboF,EAAc,iBACdlB,EAAe,kBACf3D,EAAc,iBACd8E,EAAgB,mBAChBpF,EAAgB,mBAGdqF,EAA8C,IAC9CzF,GAAU,EAAA0F,EAAA,GAAyBJ,OAEzB,EAAAK,EAAA,GAAe3F,EAASU,IACpC+E,EAASG,KAAKzF,EAAcH,IAG5BqE,IAAoBE,GACpBkB,EAASG,KAAKL,EAAe,CAAElB,gBAAiBE,K,iBAIhD,O,sBAAA,GAAMsB,QAAQC,IAAIL,I,cAAlB,SAEAD,I,0CAEqBlF,OACjBF,EAAiB,G,gCAIjC,QArEsB,oBACZ,YAAA2F,kBAAN,W,sIACU,EAAmD9F,KAAKC,MAAtD8F,EAAU,aAAE,IAAAC,QAAAA,OAAO,IAAG,IAAAC,KAAI,EAAE9F,EAAgB,mB,iBAGhD,O,sBAAA,GAAM4F,K,cAAN,SACAC,I,0CAEqB3F,OACjBF,EAAiB,G,+BAK7B,YAAAI,OAAA,WACI,IAAM,EAA8CP,KAAKC,MAAjDC,EAAa,gBAAEgG,EAAc,iBAAKjG,GAAK,cAAzC,oCAEN,OACI,gBAAC8C,EAAA,EAAmB,CAACN,UAAWyD,GAC5B,uBAAK/D,UAAU,iBAMX,gBAAC,GAAW,iBACJlC,EAAK,CACTiE,SAAUlE,KAAKiE,aACf/D,cAAeA,MAKnC,EAoCJ,EArEA,CAAsB,EAAAiG,WA4HtB,SAAe,EAAAC,EAAA,IArDf,SAA2B,G,IACvBC,EAAe,kBACfC,EAAa,gBAGT,EAUAA,EAAa,KATTC,EAAW,cACXC,EAAS,YACTC,EAAO,UACPC,EAAW,cACXC,EAAiB,oBACjBC,EAAuB,0BACvBC,EAAmB,sBAEvB,EACAP,EAAa,SADDQ,EAAyB,4BAAEC,EAAwB,2BAAEC,EAAkB,qBAGjFC,EAAST,IACT7F,EAAW+F,IACXzB,EAAWsB,IACXW,EAAOT,IAEb,KAAKQ,GAAWtG,GAAasE,GAAaiC,GACtC,OAAO,KAGL,MAAsDD,EAAOE,iBAA3DC,EAAmB,sBAAE5G,EAAgB,mBAEvCE,EAA4B,CAAC,KAAM,KAAM,KAAM,MAMrD,OARuD,WAI1C,0DACTA,EAA0BiF,KAAK,MAG5B,CACHlF,eAAgBkG,IAChB5F,UAAW8F,KAAyB,IACpCnG,0BAAyB,EACzBC,SAAQ,EACRyD,gBAAiBa,EAASb,gBAC1BtD,UAAW8F,EACXpG,iBAAgB,EAChBuF,WAAYM,EAAgBgB,yBAC5BnB,eAAgBY,IAChB9F,WAAY+F,KAA8BC,IAC1C5F,SAAU4D,EAAmBC,GAC7B/D,wBAAyBkG,IAAuB,EAAAE,EAAA,GAAuBJ,GAAQ,EAC/EhH,cAAemG,EAAgBkB,qBAC/BjC,eAAgBe,EAAgBf,eAChCjE,wBAAwB,EAAAA,EAAA,GAAuB4F,EAAOE,kBAE9D,GAEA,CAA+CK,E","sources":["webpack://checkout/./packages/core/src/app/billing/BillingForm.tsx","webpack://checkout/./packages/core/src/app/billing/getBillingMethodId.ts","webpack://checkout/./packages/core/src/app/billing/Billing.tsx"],"sourcesContent":["import {\r\n  Address,\r\n  CheckoutSelectors,\r\n  Country,\r\n  Customer,\r\n  FormField,\r\n} from '@bigcommerce/checkout-sdk';\r\nimport { FormikProps, withFormik } from 'formik';\r\nimport React, { createRef, PureComponent, ReactNode, RefObject } from 'react';\r\nimport { lazy } from 'yup';\r\n\r\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\r\nimport { AddressFormSkeleton } from '@bigcommerce/checkout/ui';\r\n\r\nimport {\r\n  AddressForm,\r\n  AddressFormValues,\r\n  AddressSelect,\r\n  getAddressFormFieldsValidationSchema,\r\n  getTranslateAddressError,\r\n  isValidCustomerAddress,\r\n  mapAddressToFormValues,\r\n} from '../address';\r\nimport { getCustomFormFieldsValidationSchema } from '../formFields';\r\nimport { OrderComments } from '../orderComments';\r\nimport { Button, ButtonVariant } from '../ui/button';\r\nimport { Fieldset, Form } from '../ui/form';\r\nimport { LoadingOverlay } from '../ui/loading';\r\n\r\nimport StaticBillingAddress from './StaticBillingAddress';\r\n\r\nexport type BillingFormValues = AddressFormValues & { orderComment: string };\r\n\r\nexport interface BillingFormProps {\r\n  billingAddress?: Address;\r\n  countries: Country[];\r\n  countriesWithAutocomplete: string[];\r\n  customer: Customer;\r\n  customerMessage: string;\r\n  googleMapsApiKey: string;\r\n  isUpdating: boolean;\r\n  methodId?: string;\r\n  shouldShowOrderComments: boolean;\r\n  isFloatingLabelEnabled?: boolean;\r\n  getFields(countryCode?: string): FormField[];\r\n  onSubmit(values: BillingFormValues): void;\r\n  onUnhandledError(error: Error): void;\r\n  updateAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\r\n}\r\n\r\ninterface BillingFormState {\r\n  isResettingAddress: boolean;\r\n}\r\n\r\nclass BillingForm extends PureComponent<\r\n  BillingFormProps & WithLanguageProps & FormikProps<BillingFormValues>,\r\n  BillingFormState\r\n> {\r\n  state: BillingFormState = {\r\n    isResettingAddress: false,\r\n  };\r\n\r\n  private addressFormRef: RefObject<HTMLFieldSetElement> = createRef();\r\n\r\n  render(): ReactNode {\r\n    const {\r\n      googleMapsApiKey,\r\n      billingAddress,\r\n      countriesWithAutocomplete,\r\n      customer: { addresses, isGuest },\r\n      getFields,\r\n      countries,\r\n      isUpdating,\r\n      setFieldValue,\r\n      shouldShowOrderComments,\r\n      values,\r\n      methodId,\r\n      isFloatingLabelEnabled,\r\n    } = this.props;\r\n\r\n    const shouldRenderStaticAddress = methodId === 'amazonpay';\r\n    const allFormFields = getFields(values.countryCode);\r\n    const customFormFields = allFormFields.filter(({ custom }) => custom);\r\n    const hasCustomFormFields = customFormFields.length > 0;\r\n    const editableFormFields =\r\n      shouldRenderStaticAddress && hasCustomFormFields ? customFormFields : allFormFields;\r\n    const { isResettingAddress } = this.state;\r\n    const hasAddresses = addresses && addresses.length > 0;\r\n    const hasValidCustomerAddress =\r\n      billingAddress &&\r\n      isValidCustomerAddress(billingAddress, addresses, getFields(billingAddress.countryCode));\r\n\r\n    return (\r\n      <Form autoComplete=\"on\">\r\n        {shouldRenderStaticAddress && billingAddress && (\r\n          <div className=\"form-fieldset\">\r\n            <StaticBillingAddress address={billingAddress} />\r\n          </div>\r\n        )}\r\n\r\n        <Fieldset id=\"checkoutBillingAddress\" ref={this.addressFormRef}>\r\n          {hasAddresses && !shouldRenderStaticAddress && (\r\n            <Fieldset id=\"billingAddresses\">\r\n              <LoadingOverlay isLoading={isResettingAddress}>\r\n                <AddressSelect\r\n                  addresses={addresses}\r\n                  onSelectAddress={this.handleSelectAddress}\r\n                  onUseNewAddress={this.handleUseNewAddress}\r\n                  selectedAddress={hasValidCustomerAddress ? billingAddress : undefined}\r\n                />\r\n              </LoadingOverlay>\r\n            </Fieldset>\r\n          )}\r\n\r\n          {!hasValidCustomerAddress && (\r\n            <AddressFormSkeleton isLoading={isResettingAddress}>\r\n              <AddressForm\r\n                countries={countries}\r\n                countriesWithAutocomplete={countriesWithAutocomplete}\r\n                countryCode={values.countryCode}\r\n                formFields={editableFormFields\r\n                  .map((o) => {\r\n                    if (o.name === 'firstName') {\r\n                      return { ...o, label: 'Billing First Name' };\r\n                    }\r\n\r\n                    if (o.name === 'lastName') {\r\n                      return { ...o, label: 'Billing Last Name' };\r\n                    }\r\n\r\n                    if (o.name === 'address1') {\r\n                      return { ...o, label: 'Billing Address 1' };\r\n                    }\r\n\r\n                    if (o.name === 'address2') {\r\n                      return { ...o, label: 'Billing Address 2' };\r\n                    }\r\n\r\n                    if (o.name === 'city') {\r\n                      return { ...o, label: 'Billing City' };\r\n                    }\r\n\r\n                    if (o.name === 'countryCode') {\r\n                      return { ...o, label: 'Billing Country' };\r\n                    }\r\n\r\n                    if (o.name === 'stateOrProvinceCode') {\r\n                      return { ...o, label: 'Billing State/Province' };\r\n                    }\r\n\r\n                    if (o.name === 'postalCode') {\r\n                      return { ...o, label: 'Billing Postal Code' };\r\n                    }\r\n\r\n                    return o;\r\n                  })\r\n                  .filter((o) => ['company', 'phone'].indexOf(o.name) === -1)}\r\n                googleMapsApiKey={googleMapsApiKey}\r\n                isFloatingLabelEnabled={isFloatingLabelEnabled}\r\n                setFieldValue={setFieldValue}\r\n                shouldShowSaveAddress={!isGuest}\r\n              />\r\n            </AddressFormSkeleton>\r\n          )}\r\n        </Fieldset>\r\n\r\n        {shouldShowOrderComments && <OrderComments />}\r\n\r\n        <div className=\"form-actions\">\r\n          <Button\r\n            disabled={isUpdating || isResettingAddress}\r\n            id=\"checkout-billing-continue\"\r\n            isLoading={isUpdating || isResettingAddress}\r\n            type=\"submit\"\r\n            variant={ButtonVariant.Primary}\r\n          >\r\n            <TranslatedString id=\"common.continue_action\" />\r\n          </Button>\r\n        </div>\r\n      </Form>\r\n    );\r\n  }\r\n\r\n  private handleSelectAddress: (address: Partial<Address>) => void = async (address) => {\r\n    const { updateAddress, onUnhandledError } = this.props;\r\n\r\n    this.setState({ isResettingAddress: true });\r\n\r\n    try {\r\n      await updateAddress(address);\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        onUnhandledError(error);\r\n      }\r\n    } finally {\r\n      this.setState({ isResettingAddress: false });\r\n    }\r\n  };\r\n\r\n  private handleUseNewAddress: () => void = () => {\r\n    this.handleSelectAddress({});\r\n  };\r\n}\r\n\r\nexport default withLanguage(\r\n  withFormik<BillingFormProps & WithLanguageProps, BillingFormValues>({\r\n    handleSubmit: (values, { props: { onSubmit } }) => {\r\n      onSubmit(values);\r\n    },\r\n    mapPropsToValues: ({ getFields, customerMessage, billingAddress }) => ({\r\n      ...mapAddressToFormValues(\r\n        getFields(billingAddress && billingAddress.countryCode),\r\n        billingAddress,\r\n      ),\r\n      orderComment: customerMessage,\r\n    }),\r\n    isInitialValid: ({ billingAddress, getFields, language }) =>\r\n      !!billingAddress &&\r\n      getAddressFormFieldsValidationSchema({\r\n        language,\r\n        formFields: getFields(billingAddress.countryCode),\r\n      }).isValidSync(billingAddress),\r\n    validationSchema: ({ language, getFields, methodId }: BillingFormProps & WithLanguageProps) =>\r\n      methodId === 'amazonpay'\r\n        ? lazy<Partial<AddressFormValues>>((values) =>\r\n            getCustomFormFieldsValidationSchema({\r\n              translate: getTranslateAddressError(language),\r\n              formFields: getFields(values && values.countryCode),\r\n            }),\r\n          )\r\n        : lazy<Partial<AddressFormValues>>((values) =>\r\n            getAddressFormFieldsValidationSchema({\r\n              language,\r\n              formFields: getFields(values && values.countryCode),\r\n            }),\r\n          ),\r\n    enableReinitialize: true,\r\n  })(BillingForm),\r\n);\r\n","import { Checkout } from '@bigcommerce/checkout-sdk';\r\n\r\nimport { getPreselectedPayment } from '../payment';\r\n\r\nexport default function getBillingMethodId(checkout: Checkout): string | undefined {\r\n    const BILLING_METHOD_IDS = ['amazonpay'];\r\n    const preselectedPayment = getPreselectedPayment(checkout);\r\n\r\n    return preselectedPayment && BILLING_METHOD_IDS.indexOf(preselectedPayment.providerId) > -1\r\n        ? preselectedPayment.providerId\r\n        : undefined;\r\n}\r\n","import {\r\n    Address,\r\n    CheckoutRequestBody,\r\n    CheckoutSelectors,\r\n    Country,\r\n    Customer,\r\n    FormField,\r\n} from '@bigcommerce/checkout-sdk';\r\nimport { noop } from 'lodash';\r\nimport React, { Component, ReactNode } from 'react';\r\n\r\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\r\nimport { AddressFormSkeleton } from '@bigcommerce/checkout/ui';\r\n\r\nimport { isEqualAddress, mapAddressFromFormValues } from '../address';\r\nimport { withCheckout } from '../checkout';\r\nimport { EMPTY_ARRAY, isFloatingLabelEnabled } from '../common/utility';\r\nimport { getShippableItemsCount } from '../shipping';\r\n\r\nimport BillingForm, { BillingFormValues } from './BillingForm';\r\nimport getBillingMethodId from './getBillingMethodId';\r\n\r\nexport interface BillingProps {\r\n    navigateNextStep(): void;\r\n    onReady?(): void;\r\n    onUnhandledError(error: Error): void;\r\n}\r\n\r\nexport interface WithCheckoutBillingProps {\r\n    countries: Country[];\r\n    countriesWithAutocomplete: string[];\r\n    customer: Customer;\r\n    customerMessage: string;\r\n    googleMapsApiKey: string;\r\n    isInitializing: boolean;\r\n    isUpdating: boolean;\r\n    shouldShowOrderComments: boolean;\r\n    billingAddress?: Address;\r\n    methodId?: string;\r\n    isFloatingLabelEnabled?: boolean;\r\n    getFields(countryCode?: string): FormField[];\r\n    initialize(): Promise<CheckoutSelectors>;\r\n    updateAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\r\n    updateCheckout(payload: CheckoutRequestBody): Promise<CheckoutSelectors>;\r\n}\r\n\r\nclass Billing extends Component<BillingProps & WithCheckoutBillingProps> {\r\n    async componentDidMount(): Promise<void> {\r\n        const { initialize, onReady = noop, onUnhandledError } = this.props;\r\n\r\n        try {\r\n            await initialize();\r\n            onReady();\r\n        } catch (error) {\r\n            if (error instanceof Error) {\r\n                onUnhandledError(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    render(): ReactNode {\r\n        const { updateAddress, isInitializing, ...props } = this.props;\r\n\r\n        return (\r\n            <AddressFormSkeleton isLoading={isInitializing}>\r\n                <div className=\"checkout-form\">\r\n                    {/* <div className=\"form-legend-container\">\r\n                        <Legend testId=\"billing-address-heading\">\r\n                            <TranslatedString id=\"billing.billing_address_heading\" />\r\n                        </Legend>\r\n                    </div> */}\r\n                    <BillingForm\r\n                        {...props}\r\n                        onSubmit={this.handleSubmit}\r\n                        updateAddress={updateAddress}\r\n                    />\r\n                </div>\r\n            </AddressFormSkeleton>\r\n        );\r\n    }\r\n\r\n    private handleSubmit: (values: BillingFormValues) => void = async ({\r\n        orderComment,\r\n        ...addressValues\r\n    }) => {\r\n        const {\r\n            updateAddress,\r\n            updateCheckout,\r\n            customerMessage,\r\n            billingAddress,\r\n            navigateNextStep,\r\n            onUnhandledError,\r\n        } = this.props;\r\n\r\n        const promises: Array<Promise<CheckoutSelectors>> = [];\r\n        const address = mapAddressFromFormValues(addressValues);\r\n\r\n        if (address && !isEqualAddress(address, billingAddress)) {\r\n            promises.push(updateAddress(address));\r\n        }\r\n\r\n        if (customerMessage !== orderComment) {\r\n            promises.push(updateCheckout({ customerMessage: orderComment }));\r\n        }\r\n\r\n        try {\r\n            await Promise.all(promises);\r\n\r\n            navigateNextStep();\r\n        } catch (error) {\r\n            if (error instanceof Error) {\r\n                onUnhandledError(error);\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\nfunction mapToBillingProps({\r\n    checkoutService,\r\n    checkoutState,\r\n}: CheckoutContextProps): WithCheckoutBillingProps | null {\r\n    const {\r\n        data: {\r\n            getCheckout,\r\n            getConfig,\r\n            getCart,\r\n            getCustomer,\r\n            getBillingAddress,\r\n            getBillingAddressFields,\r\n            getBillingCountries,\r\n        },\r\n        statuses: { isLoadingBillingCountries, isUpdatingBillingAddress, isUpdatingCheckout },\r\n    } = checkoutState;\r\n\r\n    const config = getConfig();\r\n    const customer = getCustomer();\r\n    const checkout = getCheckout();\r\n    const cart = getCart();\r\n\r\n    if (!config || !customer || !checkout || !cart) {\r\n        return null;\r\n    }\r\n\r\n    const { enableOrderComments, googleMapsApiKey, features } = config.checkoutSettings;\r\n\r\n    const countriesWithAutocomplete = ['US', 'CA', 'AU', 'NZ'];\r\n\r\n    if (features['CHECKOUT-4183.checkout_google_address_autocomplete_uk']) {\r\n        countriesWithAutocomplete.push('GB');\r\n    }\r\n\r\n    return {\r\n        billingAddress: getBillingAddress(),\r\n        countries: getBillingCountries() || EMPTY_ARRAY,\r\n        countriesWithAutocomplete,\r\n        customer,\r\n        customerMessage: checkout.customerMessage,\r\n        getFields: getBillingAddressFields,\r\n        googleMapsApiKey,\r\n        initialize: checkoutService.loadBillingAddressFields,\r\n        isInitializing: isLoadingBillingCountries(),\r\n        isUpdating: isUpdatingBillingAddress() || isUpdatingCheckout(),\r\n        methodId: getBillingMethodId(checkout),\r\n        shouldShowOrderComments: enableOrderComments && getShippableItemsCount(cart) < 1,\r\n        updateAddress: checkoutService.updateBillingAddress,\r\n        updateCheckout: checkoutService.updateCheckout,\r\n        isFloatingLabelEnabled: isFloatingLabelEnabled(config.checkoutSettings),\r\n    };\r\n}\r\n\r\nexport default withCheckout(mapToBillingProps)(Billing);\r\n"],"names":["state","isResettingAddress","addressFormRef","createRef","handleSelectAddress","address","this","props","updateAddress","onUnhandledError","setState","Error","handleUseNewAddress","render","googleMapsApiKey","billingAddress","countriesWithAutocomplete","customer","addresses","isGuest","getFields","countries","isUpdating","setFieldValue","shouldShowOrderComments","values","methodId","isFloatingLabelEnabled","shouldRenderStaticAddress","allFormFields","countryCode","customFormFields","filter","hasCustomFormFields","length","editableFormFields","hasAddresses","hasValidCustomerAddress","isValidCustomerAddress","Form","autoComplete","className","StaticBillingAddress","Fieldset","id","ref","LoadingOverlay","isLoading","AddressSelect","onSelectAddress","onUseNewAddress","selectedAddress","undefined","AddressFormSkeleton","AddressForm","formFields","map","o","name","label","indexOf","shouldShowSaveAddress","OrderComments","Button","disabled","type","variant","TranslatedString","PureComponent","withLanguage","withFormik","handleSubmit","onSubmit","mapPropsToValues","customerMessage","mapAddressToFormValues","orderComment","isInitialValid","language","getAddressFormFieldsValidationSchema","isValidSync","validationSchema","getCustomFormFieldsValidationSchema","translate","enableReinitialize","BillingForm","getBillingMethodId","checkout","preselectedPayment","getPreselectedPayment","providerId","addressValues","updateCheckout","navigateNextStep","promises","mapAddressFromFormValues","isEqualAddress","push","Promise","all","componentDidMount","initialize","onReady","noop","isInitializing","Component","withCheckout","checkoutService","checkoutState","getCheckout","getConfig","getCart","getCustomer","getBillingAddress","getBillingAddressFields","getBillingCountries","isLoadingBillingCountries","isUpdatingBillingAddress","isUpdatingCheckout","config","cart","checkoutSettings","enableOrderComments","loadBillingAddressFields","getShippableItemsCount","updateBillingAddress","Billing"],"sourceRoot":""}