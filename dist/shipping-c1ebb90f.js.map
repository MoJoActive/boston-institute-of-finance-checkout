{"version":3,"file":"shipping-c1ebb90f.js","mappings":"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","sources":["webpack://checkout/./packages/core/src/app/common/dom/getAppliedStyles.ts","webpack://checkout/./packages/core/src/app/common/form/connectFormik.tsx","webpack://checkout/./packages/core/src/app/shipping/errors/UnassignItemError.ts","webpack://checkout/./packages/core/src/app/shipping/getShippingMethodId.ts","webpack://checkout/./packages/locale/src/TranslatedLink.tsx","webpack://checkout/./packages/locale/src/utils/preventDefault.ts","webpack://checkout/./packages/locale/src/utils/parseAnchor.ts","webpack://checkout/./packages/core/src/app/address/AddressFormModal.tsx","webpack://checkout/./packages/core/src/app/shipping/errors/AssignItemInvalidAddressError.ts","webpack://checkout/./packages/core/src/app/shipping/errors/AssignItemFailedError.ts","webpack://checkout/./packages/core/src/app/shipping/findConsignment.ts","webpack://checkout/./packages/core/src/app/shipping/getShippableLineItems.ts","webpack://checkout/./packages/core/src/app/shipping/ItemAddressSelect.tsx","webpack://checkout/./packages/core/src/app/shipping/getRecommendedShippingOption.ts","webpack://checkout/./packages/core/src/app/shipping/shippingOption/ShippingOptionsList.tsx","webpack://checkout/./packages/core/src/app/shipping/shippingOption/ShippingOptionsForm.tsx","webpack://checkout/./packages/core/src/app/shipping/shippingOption/ShippingOptions.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingFormFooter.tsx","webpack://checkout/./packages/core/src/app/shipping/MultiShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/updateShippableItems.ts","webpack://checkout/./packages/core/src/app/shipping/BillingSameAsShippingField.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddressForm.tsx","webpack://checkout/./packages/core/src/app/shipping/StaticAddressEditable.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddress.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddressFields.ts","webpack://checkout/./packages/core/src/app/shipping/SingleShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingHeader.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShippingAddressDisplay.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeStateMapper.ts","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShippingAddress.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShipping.tsx","webpack://checkout/./packages/core/src/app/shipping/Shipping.tsx","webpack://checkout/./packages/core/src/app/ui/accordion/AccordionContext.tsx","webpack://checkout/./packages/core/src/app/ui/form/CheckboxFormField.tsx","webpack://checkout/./packages/core/src/app/ui/accordion/Accordion.tsx","webpack://checkout/./packages/core/src/app/ui/form/Checklist.tsx","webpack://checkout/./packages/core/src/app/ui/accordion/AccordionItem.tsx","webpack://checkout/./packages/core/src/app/ui/form/ChecklistItemInput.tsx","webpack://checkout/./packages/core/src/app/ui/form/ChecklistItem.tsx"],"sourcesContent":["import { kebabCase } from 'lodash';\r\n\r\nexport default function getAppliedStyles(\r\n    element: HTMLElement,\r\n    properties: string[],\r\n): { [key: string]: string } {\r\n    const declaration = window.getComputedStyle(element);\r\n\r\n    return properties.reduce(\r\n        (result, propertyName) => ({\r\n            ...result,\r\n            [propertyName]: declaration.getPropertyValue(kebabCase(propertyName)),\r\n        }),\r\n        {},\r\n    );\r\n}\r\n","import { connect } from 'formik';\r\nimport React, { ComponentType, FunctionComponent, memo } from 'react';\r\nimport shallowEqual from 'shallowequal';\r\n\r\nimport ConnectFormikProps from './ConnectFormikProps';\r\n\r\nexport default function connectFormik<TProps extends ConnectFormikProps<TValues>, TValues = any>(\r\n    OriginalComponent: ComponentType<TProps>,\r\n): ComponentType<Omit<TProps, keyof ConnectFormikProps<TValues>>> {\r\n    const InnerComponent: FunctionComponent<TProps> = memo(\r\n        (props) => <OriginalComponent {...props} />,\r\n        ({ formik: prevFormik, ...prevProps }, { formik: nextFormik, ...nextProps }) =>\r\n            shallowEqual(prevFormik, nextFormik) && shallowEqual(prevProps, nextProps),\r\n    );\r\n\r\n    const DecoratedComponent = connect<TProps, TValues>(InnerComponent) as ComponentType<\r\n        Omit<TProps, keyof ConnectFormikProps<TValues>>\r\n    >;\r\n\r\n    DecoratedComponent.displayName = `ConnectFormik(${\r\n        OriginalComponent.displayName || OriginalComponent.name\r\n    })`;\r\n\r\n    return DecoratedComponent;\r\n}\r\n","import { getLanguageService } from '@bigcommerce/checkout/locale';\r\n\r\nimport { CustomError, setPrototypeOf } from '../../common/error';\r\n\r\nexport default class UnassignItemError extends CustomError {\r\n    constructor(data: Error) {\r\n        super({\r\n            name: 'UNASSIGN_ITEM_FAILED',\r\n            message: getLanguageService().translate('shipping.unassign_item_error'),\r\n            data,\r\n        });\r\n\r\n        setPrototypeOf(this, UnassignItemError.prototype);\r\n    }\r\n}\r\n","import { Checkout } from '@bigcommerce/checkout-sdk';\r\n\r\nimport { getPreselectedPayment } from '../payment';\r\n\r\nexport default function getShippingMethodId(checkout: Checkout): string | undefined {\r\n    const SHIPPING_METHOD_IDS = ['amazonpay'];\r\n    const preselectedPayment = getPreselectedPayment(checkout);\r\n\r\n    return preselectedPayment && SHIPPING_METHOD_IDS.indexOf(preselectedPayment.providerId) > -1\r\n        ? preselectedPayment.providerId\r\n        : undefined;\r\n}\r\n","import React, { FunctionComponent, MouseEventHandler } from 'react';\r\n\r\nimport { TranslatedStringProps } from './TranslatedString';\r\nimport { parseAnchor, preventDefault } from './utils';\r\nimport withLanguage, { WithLanguageProps } from './withLanguage';\r\n\r\nexport type TranslatedLinkProps = TranslatedStringProps & {\r\n    testId?: string;\r\n    onClick: MouseEventHandler;\r\n};\r\n\r\nconst TranslatedLink: FunctionComponent<TranslatedLinkProps & WithLanguageProps> = ({\r\n    data,\r\n    id,\r\n    language,\r\n    onClick,\r\n    testId,\r\n}) => {\r\n    const translatedString = language.translate(id, data);\r\n    const parsedString = parseAnchor(translatedString);\r\n\r\n    return parsedString.length ? (\r\n        <>\r\n            {parsedString[0]}\r\n            <a data-test={testId} href=\"#\" onClick={preventDefault(onClick)}>\r\n                {parsedString[1]}\r\n            </a>\r\n            {parsedString[2]}\r\n        </>\r\n    ) : (\r\n        <>{translatedString}</>\r\n    );\r\n};\r\n\r\nexport default withLanguage(TranslatedLink);\r\n","import { SyntheticEvent } from 'react';\r\n\r\nexport default function preventDefault<\r\n    TFunc extends (event: TEvent, ...args: any[]) => any,\r\n    TEvent extends SyntheticEvent,\r\n>(fn?: TFunc): (event: TEvent) => void {\r\n    return (event) => {\r\n        event.preventDefault();\r\n\r\n        if (fn) {\r\n            fn(event);\r\n        }\r\n    };\r\n}\r\n","export default function parseAnchor(text: string): string[] {\r\n    const div = document.createElement('div');\r\n\r\n    div.innerHTML = text;\r\n\r\n    const anchor = div.querySelector('a');\r\n\r\n    if (!anchor) {\r\n        return [];\r\n    }\r\n\r\n    const anchorSiblings = div.innerHTML.split(anchor.outerHTML);\r\n\r\n    return [anchorSiblings[0], anchor.text, anchorSiblings[1]];\r\n}\r\n","import { Country, FormField } from '@bigcommerce/checkout-sdk';\r\nimport { FormikProps, withFormik } from 'formik';\r\nimport React, { FunctionComponent } from 'react';\r\nimport { lazy } from 'yup';\r\n\r\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\r\n\r\nimport { preventDefault } from '../common/dom';\r\nimport { Button, ButtonVariant } from '../ui/button';\r\nimport { Form } from '../ui/form';\r\nimport { LoadingOverlay } from '../ui/loading';\r\nimport { Modal, ModalHeader } from '../ui/modal';\r\n\r\nimport AddressForm from './AddressForm';\r\nimport getAddressFormFieldsValidationSchema from './getAddressFormFieldsValidationSchema';\r\nimport { AddressFormValues } from './mapAddressToFormValues';\r\n\r\nexport interface AddressFormModalProps extends AddressFormProps {\r\n    isOpen: boolean;\r\n    onAfterOpen?(): void;\r\n}\r\n\r\nexport interface AddressFormProps {\r\n    countries?: Country[];\r\n    countriesWithAutocomplete: string[];\r\n    googleMapsApiKey?: string;\r\n    isLoading: boolean;\r\n    shouldShowSaveAddress?: boolean;\r\n    defaultCountryCode?: string;\r\n    isFloatingLabelEnabled?: boolean;\r\n    getFields(countryCode?: string): FormField[];\r\n    onSaveAddress(address: AddressFormValues): void;\r\n    onRequestClose?(): void;\r\n}\r\n\r\nconst SaveAddress: FunctionComponent<\r\n    AddressFormProps & WithLanguageProps & FormikProps<AddressFormValues>\r\n> = ({\r\n    googleMapsApiKey,\r\n    getFields,\r\n    countriesWithAutocomplete,\r\n    countries,\r\n    values,\r\n    setFieldValue,\r\n    isLoading,\r\n    onRequestClose,\r\n    isFloatingLabelEnabled,\r\n}) => (\r\n    <Form autoComplete=\"on\">\r\n        <LoadingOverlay isLoading={isLoading}>\r\n            <AddressForm\r\n                countries={countries}\r\n                countriesWithAutocomplete={countriesWithAutocomplete}\r\n                countryCode={values.countryCode}\r\n                formFields={getFields(values.countryCode)}\r\n                googleMapsApiKey={googleMapsApiKey}\r\n                isFloatingLabelEnabled={isFloatingLabelEnabled}\r\n                setFieldValue={setFieldValue}\r\n                shouldShowSaveAddress={false}\r\n            />\r\n            <div className=\"form-actions\">\r\n                <a\r\n                    className=\"button optimizedCheckout-buttonSecondary\"\r\n                    href=\"#\"\r\n                    onClick={preventDefault(onRequestClose)}\r\n                >\r\n                    <TranslatedString id=\"common.cancel_action\" />\r\n                </a>\r\n\r\n                <Button\r\n                    disabled={isLoading}\r\n                    id=\"checkout-save-address\"\r\n                    type=\"submit\"\r\n                    variant={ButtonVariant.Primary}\r\n                >\r\n                    <TranslatedString id=\"address.save_address_action\" />\r\n                </Button>\r\n            </div>\r\n        </LoadingOverlay>\r\n    </Form>\r\n);\r\n\r\nconst SaveAddressForm = withLanguage(\r\n    withFormik<AddressFormProps & WithLanguageProps, AddressFormValues>({\r\n        handleSubmit: (values, { props: { onSaveAddress } }) => {\r\n            onSaveAddress(values);\r\n        },\r\n        mapPropsToValues: ({ defaultCountryCode = '' }) => ({\r\n            firstName: '',\r\n            lastName: '',\r\n            address1: '',\r\n            address2: '',\r\n            customFields: {},\r\n            country: '',\r\n            countryCode: defaultCountryCode,\r\n            stateOrProvince: '',\r\n            stateOrProvinceCode: '',\r\n            postalCode: '',\r\n            phone: '',\r\n            city: '',\r\n            company: '',\r\n            shouldSaveAddress: false,\r\n        }),\r\n        validationSchema: ({ language, getFields }: AddressFormProps & WithLanguageProps) =>\r\n            lazy<Partial<AddressFormValues>>((values) =>\r\n                getAddressFormFieldsValidationSchema({\r\n                    language,\r\n                    formFields: getFields(values && values.countryCode),\r\n                }),\r\n            ),\r\n    })(SaveAddress),\r\n);\r\n\r\nconst AddressFormModal: FunctionComponent<AddressFormModalProps> = ({\r\n    isOpen,\r\n    onAfterOpen,\r\n    onRequestClose,\r\n    ...addressFormProps\r\n}) => (\r\n    <Modal\r\n        additionalModalClassName=\"modal--medium\"\r\n        header={\r\n            <ModalHeader>\r\n                <TranslatedString id=\"address.add_address_heading\" />\r\n            </ModalHeader>\r\n        }\r\n        isOpen={isOpen}\r\n        onAfterOpen={onAfterOpen}\r\n        onRequestClose={onRequestClose}\r\n        shouldShowCloseButton={true}\r\n    >\r\n        <SaveAddressForm {...addressFormProps} onRequestClose={onRequestClose} />\r\n    </Modal>\r\n);\r\n\r\nexport default AddressFormModal;\r\n","import { getLanguageService } from '@bigcommerce/checkout/locale';\r\n\r\nimport { CustomError, setPrototypeOf } from '../../common/error';\r\n\r\nexport default class AssignItemInvalidAddressError extends CustomError {\r\n    constructor(data?: Error) {\r\n        super({\r\n            name: 'ASSIGN_ITEM_INVALID_ADDRESS',\r\n            message: getLanguageService().translate('shipping.assign_item_invalid_address_error'),\r\n            title: getLanguageService().translate(\r\n                'shipping.assign_item_invalid_address_error_heading',\r\n            ),\r\n            data,\r\n        });\r\n\r\n        setPrototypeOf(this, AssignItemInvalidAddressError.prototype);\r\n    }\r\n}\r\n","import { getLanguageService } from '@bigcommerce/checkout/locale';\r\n\r\nimport { CustomError, setPrototypeOf } from '../../common/error';\r\n\r\nexport default class AssignItemFailedError extends CustomError {\r\n    constructor(data: Error) {\r\n        super({\r\n            name: 'ASSIGN_ITEM_FAILED',\r\n            message: getLanguageService().translate('shipping.assign_item_error'),\r\n            data,\r\n        });\r\n\r\n        setPrototypeOf(this, AssignItemFailedError.prototype);\r\n    }\r\n}\r\n","import { Consignment } from '@bigcommerce/checkout-sdk';\r\nimport { find, includes } from 'lodash';\r\n\r\nexport default function findConsignment(\r\n    consignments: Consignment[],\r\n    itemId: string,\r\n): Consignment | undefined {\r\n    return find(consignments, (consignment) => includes(consignment.lineItemIds, itemId));\r\n}\r\n","import { Cart, Consignment, PhysicalItem } from '@bigcommerce/checkout-sdk';\r\nimport { isNil, reduce } from 'lodash';\r\n\r\nimport findConsignment from './findConsignment';\r\nimport ShippableItem from './ShippableItem';\r\n\r\nexport default function getShippableLineItems(\r\n    cart: Cart,\r\n    consignments: Consignment[],\r\n): ShippableItem[] {\r\n    return reduce(\r\n        (cart && cart.lineItems.physicalItems) || [],\r\n        (result, item, i) =>\r\n            !item.addedByPromotion && isNil(item.parentId)\r\n                ? result.concat(...splitItem(item, consignments, i))\r\n                : result,\r\n        [] as ShippableItem[],\r\n    );\r\n}\r\n\r\nfunction splitItem(\r\n    item: PhysicalItem,\r\n    consignments: Consignment[],\r\n    lineItemIndex: number,\r\n): ShippableItem[] {\r\n    let splitItems: ShippableItem[] = [];\r\n    const consignment = findConsignment(consignments, item.id as string);\r\n\r\n    for (let i = 0; i < item.quantity; i++) {\r\n        splitItems = splitItems.concat({\r\n            ...item,\r\n            key: `${item.variantId}-${item.productId}-${lineItemIndex}-${i}`,\r\n            consignment,\r\n            quantity: 1,\r\n        });\r\n    }\r\n\r\n    return splitItems;\r\n}\r\n","import { Address, CustomerAddress } from '@bigcommerce/checkout-sdk';\r\nimport React, { FunctionComponent, memo, useCallback } from 'react';\r\n\r\nimport { AddressSelect } from '../address';\r\n\r\nimport ShippableItem from './ShippableItem';\r\n\r\nexport interface ItemAddressSelectProps {\r\n    item: ShippableItem;\r\n    addresses: CustomerAddress[];\r\n    onSelectAddress(address: Address, itemId: string, itemKey: string): void;\r\n    onUseNewAddress(address: Address | undefined, itemId: string, itemKey: string): void;\r\n}\r\n\r\nconst ItemAddressSelect: FunctionComponent<ItemAddressSelectProps> = ({\r\n    item: { id, key, imageUrl, quantity, name, options, consignment },\r\n    addresses,\r\n    onSelectAddress,\r\n    onUseNewAddress,\r\n}) => {\r\n    const handleUseNewAddress = useCallback(\r\n        (address: Address) => {\r\n            onUseNewAddress(address, id as string, key);\r\n        },\r\n        [id, onUseNewAddress, key],\r\n    );\r\n\r\n    const handleSelectAddress = useCallback(\r\n        (address: Address) => {\r\n            onSelectAddress(address, id as string, key);\r\n        },\r\n        [id, key, onSelectAddress],\r\n    );\r\n\r\n    return (\r\n        <div className=\"consignment\">\r\n            <figure className=\"consignment-product-figure\">\r\n                {imageUrl && <img alt={name} src={imageUrl} />}\r\n            </figure>\r\n\r\n            <div className=\"consignment-product-body\">\r\n                <h4 className=\"optimizedCheckout-contentPrimary\">{`${quantity} x ${name}`}</h4>\r\n\r\n                {(options || []).map(({ name: optionName, value, nameId }) => (\r\n                    <ul\r\n                        className=\"product-options optimizedCheckout-contentSecondary\"\r\n                        data-test=\"consigment-item-product-options\"\r\n                        key={nameId}\r\n                    >\r\n                        <li className=\"product-option\">{`${optionName} ${value}`}</li>\r\n                    </ul>\r\n                ))}\r\n\r\n                <AddressSelect\r\n                    addresses={addresses}\r\n                    onSelectAddress={handleSelectAddress}\r\n                    onUseNewAddress={handleUseNewAddress}\r\n                    selectedAddress={consignment && consignment.shippingAddress}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default memo(ItemAddressSelect);\r\n","import { ShippingOption } from '@bigcommerce/checkout-sdk';\r\n\r\nexport default function getRecommendedShippingOption(\r\n    availableShippingOptions: ShippingOption[],\r\n): ShippingOption | undefined {\r\n    if (!availableShippingOptions) {\r\n        return;\r\n    }\r\n\r\n    return availableShippingOptions.find(\r\n        ({ isRecommended }: { isRecommended: any }) => isRecommended,\r\n    );\r\n}\r\n","import { ShippingOption } from '@bigcommerce/checkout-sdk';\r\nimport React, { FunctionComponent, memo, useCallback } from 'react';\r\n\r\nimport { EMPTY_ARRAY } from '../../common/utility';\r\nimport { Checklist, ChecklistItem } from '../../ui/form';\r\nimport { LoadingOverlay } from '../../ui/loading';\r\n\r\nimport StaticShippingOption from './StaticShippingOption';\r\n\r\ninterface ShippingOptionListItemProps {\r\n    consignmentId: string;\r\n    shippingOption: ShippingOption;\r\n}\r\n\r\nconst ShippingOptionListItem: FunctionComponent<ShippingOptionListItemProps> = ({\r\n    consignmentId,\r\n    shippingOption,\r\n}) => {\r\n    const renderLabel = useCallback(\r\n        () => (\r\n            <div className=\"shippingOptionLabel\">\r\n                <StaticShippingOption displayAdditionalInformation={true} method={shippingOption} />\r\n            </div>\r\n        ),\r\n        [shippingOption],\r\n    );\r\n\r\n    return (\r\n        <ChecklistItem\r\n            htmlId={`shippingOptionRadio-${consignmentId}-${shippingOption.id}`}\r\n            label={renderLabel}\r\n            value={shippingOption.id}\r\n        />\r\n    );\r\n};\r\n\r\nexport interface ShippingOptionListProps {\r\n    consignmentId: string;\r\n    inputName: string;\r\n    isLoading: boolean;\r\n    selectedShippingOptionId?: string;\r\n    shippingOptions?: ShippingOption[];\r\n    onSelectedOption(consignmentId: string, shippingOptionId: string): void;\r\n}\r\n\r\nconst ShippingOptionsList: FunctionComponent<ShippingOptionListProps> = ({\r\n    consignmentId,\r\n    inputName,\r\n    isLoading,\r\n    shippingOptions = EMPTY_ARRAY,\r\n    selectedShippingOptionId,\r\n    onSelectedOption,\r\n}) => {\r\n    const handleSelect = useCallback(\r\n        (value: string) => {\r\n            onSelectedOption(consignmentId, value);\r\n        },\r\n        [consignmentId, onSelectedOption],\r\n    );\r\n\r\n    if (!shippingOptions.length) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <LoadingOverlay isLoading={isLoading}>\r\n            <Checklist\r\n                aria-live=\"polite\"\r\n                defaultSelectedItemId={selectedShippingOptionId}\r\n                name={inputName}\r\n                onSelect={handleSelect}\r\n            >\r\n                {shippingOptions.map((shippingOption) => (\r\n                    <ShippingOptionListItem\r\n                        consignmentId={consignmentId}\r\n                        key={shippingOption.id}\r\n                        shippingOption={shippingOption}\r\n                    />\r\n                ))}\r\n            </Checklist>\r\n        </LoadingOverlay>\r\n    );\r\n};\r\n\r\nexport default memo(ShippingOptionsList);\r\n","import { CheckoutSelectors, Consignment } from '@bigcommerce/checkout-sdk';\r\nimport { FormikProps, withFormik } from 'formik';\r\nimport { noop } from 'lodash';\r\nimport React, { PureComponent, ReactNode } from 'react';\r\n\r\nimport { AnalyticsContextProps } from '@bigcommerce/checkout/analytics';\r\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\r\nimport { ChecklistSkeleton } from '@bigcommerce/checkout/ui';\r\n\r\nimport { StaticAddress } from '../../address';\r\nimport { withAnalytics } from '../../analytics';\r\nimport getRecommendedShippingOption from '../getRecommendedShippingOption';\r\nimport StaticConsignmentItemList from '../StaticConsignmentItemList';\r\n\r\nimport { ShippingOptionsProps, WithCheckoutShippingOptionsProps } from './ShippingOptions';\r\nimport './ShippingOptionsForm.scss';\r\nimport ShippingOptionsList from './ShippingOptionsList';\r\n\r\nexport type ShippingOptionsFormProps = ShippingOptionsProps & WithCheckoutShippingOptionsProps & AnalyticsContextProps;\r\n\r\nclass ShippingOptionsForm extends PureComponent<\r\n    ShippingOptionsFormProps & FormikProps<ShippingOptionsFormValues>\r\n> {\r\n    private unsubscribe?: () => void;\r\n\r\n    componentDidMount(): void {\r\n        const { subscribeToConsignments } = this.props;\r\n\r\n        this.unsubscribe = subscribeToConsignments(this.selectDefaultShippingOptions);\r\n    }\r\n\r\n    componentDidUpdate(): void {\r\n        const {\r\n            analyticsTracker,\r\n            consignments,\r\n            shouldShowShippingOptions\r\n        } = this.props;\r\n\r\n        if (consignments?.length && shouldShowShippingOptions) {\r\n            analyticsTracker.showShippingMethods();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount(): void {\r\n        if (this.unsubscribe) {\r\n            this.unsubscribe();\r\n            this.unsubscribe = undefined;\r\n        }\r\n    }\r\n\r\n    render(): ReactNode {\r\n        const {\r\n            consignments,\r\n            isMultiShippingMode,\r\n            selectShippingOption,\r\n            isLoading,\r\n            shouldShowShippingOptions,\r\n            invalidShippingMessage,\r\n            methodId\r\n        } = this.props;\r\n\r\n        if (!consignments?.length || !shouldShowShippingOptions) {\r\n            return (\r\n                <ChecklistSkeleton\r\n                    additionalClassName=\"shippingOptions-skeleton\"\r\n                    isLoading={isLoading()}\r\n                    rows={2}\r\n                >\r\n                    {this.renderNoShippingOptions(\r\n                        <TranslatedString\r\n                            id={\r\n                                methodId || isMultiShippingMode\r\n                                    ? 'shipping.select_shipping_address_text'\r\n                                    : 'shipping.enter_shipping_address_text'\r\n                            }\r\n                        />,\r\n                    )}\r\n                </ChecklistSkeleton>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <>\r\n                {consignments.map((consignment) => (\r\n                    <div className=\"shippingOptions-container form-fieldset\" key={consignment.id}>\r\n                        {isMultiShippingMode && this.renderConsignment(consignment)}\r\n\r\n                        <ShippingOptionsList\r\n                            consignmentId={consignment.id}\r\n                            inputName={getRadioInputName(consignment.id)}\r\n                            isLoading={isLoading(consignment.id)}\r\n                            onSelectedOption={selectShippingOption}\r\n                            selectedShippingOptionId={\r\n                                consignment.selectedShippingOption &&\r\n                                consignment.selectedShippingOption.id\r\n                            }\r\n                            shippingOptions={consignment.availableShippingOptions}\r\n                        />\r\n\r\n                        {(!consignment.availableShippingOptions ||\r\n                            !consignment.availableShippingOptions.length) && (\r\n                            <ChecklistSkeleton\r\n                                additionalClassName=\"shippingOptions-skeleton\"\r\n                                isLoading={isLoading(consignment.id)}\r\n                                rows={2}\r\n                            >\r\n                                {this.renderNoShippingOptions(invalidShippingMessage)}\r\n                            </ChecklistSkeleton>\r\n                        )}\r\n                    </div>\r\n                ))}\r\n            </>\r\n        );\r\n    }\r\n\r\n    private selectDefaultShippingOptions: (state: CheckoutSelectors) => void = async ({ data }) => {\r\n        const { selectShippingOption, setFieldValue } = this.props;\r\n\r\n        const consignment = (data.getConsignments() || []).find(\r\n            ({ selectedShippingOption, availableShippingOptions: shippingOptions }) =>\r\n                !selectedShippingOption && shippingOptions,\r\n        );\r\n\r\n        if (!consignment || !consignment.availableShippingOptions) {\r\n            return;\r\n        }\r\n\r\n        const { availableShippingOptions, id } = consignment;\r\n        const recommendedOption = getRecommendedShippingOption(availableShippingOptions);\r\n        const singleShippingOption =\r\n            availableShippingOptions.length === 1 && availableShippingOptions[0];\r\n        const defaultShippingOption = recommendedOption || singleShippingOption;\r\n\r\n        if (!defaultShippingOption) {\r\n            return;\r\n        }\r\n\r\n        await selectShippingOption(id, defaultShippingOption.id);\r\n        setFieldValue(`shippingOptionIds.${id}`, defaultShippingOption.id);\r\n    };\r\n\r\n    private renderNoShippingOptions(message: ReactNode): ReactNode {\r\n        return (\r\n            <div className=\"shippingOptions-panel optimizedCheckout-overlay\">\r\n                <p\r\n                    aria-live=\"polite\"\r\n                    className=\"shippingOptions-panel-message optimizedCheckout-primaryContent\"\r\n                    role=\"alert\"\r\n                >\r\n                    {message}\r\n                </p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private renderConsignment(consignment: Consignment): ReactNode {\r\n        const { cart } = this.props;\r\n\r\n        return (\r\n            <div className=\"staticConsignment\">\r\n                <strong>\r\n                    <TranslatedString id=\"shipping.shipping_address_heading\" />\r\n                </strong>\r\n\r\n                <StaticAddress address={consignment.shippingAddress} />\r\n\r\n                <StaticConsignmentItemList cart={cart} consignment={consignment} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction getRadioInputName(consignmentId: string): string {\r\n    return `shippingOptionIds.${consignmentId}`;\r\n}\r\n\r\nexport interface ShippingOptionsFormValues {\r\n    shippingOptionIds: {\r\n        [shippingOptionIds: string]: string;\r\n    };\r\n}\r\n\r\nexport default withAnalytics(withFormik<ShippingOptionsFormProps, ShippingOptionsFormValues>({\r\n    handleSubmit: noop,\r\n    mapPropsToValues({ consignments }) {\r\n        const shippingOptionIds: { [id: string]: string } = {};\r\n\r\n        (consignments || []).forEach((consignment) => {\r\n            shippingOptionIds[consignment.id] = consignment.selectedShippingOption\r\n                ? consignment.selectedShippingOption.id\r\n                : '';\r\n        });\r\n\r\n        return { shippingOptionIds };\r\n    },\r\n})(ShippingOptionsForm));\r\n","import { Cart, CheckoutSelectors, Consignment } from '@bigcommerce/checkout-sdk';\r\nimport { map, sortBy, uniq } from 'lodash';\r\nimport { createSelector } from 'reselect';\r\n\r\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\r\n\r\nimport { withCheckout } from '../../checkout';\r\nimport getShippableLineItems from '../getShippableLineItems';\r\nimport getShippingMethodId from '../getShippingMethodId';\r\n\r\nimport ShippingOptionsForm from './ShippingOptionsForm';\r\n\r\nexport interface ShippingOptionsProps {\r\n    isMultiShippingMode: boolean;\r\n    isUpdatingAddress?: boolean;\r\n    shouldShowShippingOptions: boolean;\r\n}\r\n\r\nexport interface WithCheckoutShippingOptionsProps {\r\n    invalidShippingMessage: string;\r\n    methodId?: string;\r\n    consignments?: Consignment[];\r\n    cart: Cart;\r\n    isSelectingShippingOption(consignmentId?: string): boolean;\r\n    subscribeToConsignments(subscriber: (state: CheckoutSelectors) => void): () => void;\r\n    selectShippingOption(consignmentId: string, optionId: string): Promise<CheckoutSelectors>;\r\n    isLoading(consignmentId?: string): boolean;\r\n}\r\n\r\nconst subscribeToConsignmentsSelector = createSelector(\r\n    ({ checkoutService }: CheckoutContextProps) => checkoutService.subscribe,\r\n    (subscribe) => (subscriber: (state: CheckoutSelectors) => void) => {\r\n        return subscribe(subscriber, ({ data }) => data.getConsignments());\r\n    },\r\n);\r\n\r\nconst isLoadingSelector = createSelector(\r\n    (_: CheckoutSelectors, { isUpdatingAddress }: ShippingOptionsProps) => isUpdatingAddress,\r\n    ({ statuses }: CheckoutSelectors) => statuses.isLoadingShippingOptions,\r\n    ({ statuses }: CheckoutSelectors) => statuses.isSelectingShippingOption,\r\n    ({ statuses }: CheckoutSelectors) => statuses.isUpdatingConsignment,\r\n    ({ statuses }: CheckoutSelectors) => statuses.isCreatingConsignments,\r\n    (\r\n        isUpdatingAddress,\r\n        isLoadingShippingOptions,\r\n        isSelectingShippingOption,\r\n        isUpdatingConsignment,\r\n        isCreatingConsignments,\r\n    ) => {\r\n        return (consignmentId?: string) => {\r\n            return (\r\n                isUpdatingAddress ||\r\n                isLoadingShippingOptions() ||\r\n                isSelectingShippingOption(consignmentId) ||\r\n                isUpdatingConsignment(consignmentId) ||\r\n                isCreatingConsignments()\r\n            );\r\n        };\r\n    },\r\n);\r\n\r\nconst sortConsignments = (cart: Cart, unsortedConsignments: Consignment[]): Consignment[] => {\r\n    if (unsortedConsignments.length < 2) {\r\n        return unsortedConsignments;\r\n    }\r\n\r\n    const shippableItems = getShippableLineItems(cart, unsortedConsignments);\r\n    const consignmentsOrder = uniq(map(shippableItems, 'consignment.id'));\r\n\r\n    return sortBy(unsortedConsignments, (consignment) => consignmentsOrder.indexOf(consignment.id));\r\n};\r\n\r\nexport function mapToShippingOptions(\r\n    { checkoutService, checkoutState }: CheckoutContextProps,\r\n    props: ShippingOptionsProps,\r\n): WithCheckoutShippingOptionsProps | null {\r\n    const {\r\n        data: { getCart, getConsignments, getConfig, getCustomer, getCheckout },\r\n        statuses: { isSelectingShippingOption },\r\n    } = checkoutState;\r\n\r\n    const customer = getCustomer();\r\n    const cart = getCart();\r\n    const config = getConfig();\r\n    const checkout = getCheckout();\r\n\r\n    if (!config || !checkout || !customer || !cart) {\r\n        return null;\r\n    }\r\n\r\n    const consignments = sortConsignments(cart, getConsignments() || []);\r\n    const methodId = getShippingMethodId(checkout);\r\n    const { shippingQuoteFailedMessage } = config.checkoutSettings;\r\n\r\n    return {\r\n        cart,\r\n        consignments,\r\n        invalidShippingMessage: shippingQuoteFailedMessage,\r\n        isLoading: isLoadingSelector(checkoutState, props),\r\n        isSelectingShippingOption,\r\n        methodId,\r\n        selectShippingOption: checkoutService.selectConsignmentShippingOption,\r\n        subscribeToConsignments: subscribeToConsignmentsSelector({\r\n            checkoutService,\r\n            checkoutState,\r\n        }),\r\n    };\r\n}\r\n\r\nexport default withCheckout(mapToShippingOptions)(ShippingOptionsForm);\r\n","import React, { PureComponent, ReactNode } from 'react';\r\n\r\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\r\n\r\nimport { OrderComments } from '../orderComments';\r\nimport { Alert, AlertType } from '../ui/alert';\r\nimport { Button, ButtonVariant } from '../ui/button';\r\nimport { Fieldset, Legend } from '../ui/form';\r\n\r\nimport { ShippingOptions } from './shippingOption';\r\n\r\nexport interface ShippingFormFooterProps {\r\n    cartHasChanged: boolean;\r\n    isMultiShippingMode: boolean;\r\n    shouldShowOrderComments: boolean;\r\n    shouldShowShippingOptions?: boolean;\r\n    shouldDisableSubmit: boolean;\r\n    isLoading: boolean;\r\n}\r\n\r\nclass ShippingFormFooter extends PureComponent<ShippingFormFooterProps> {\r\n    render(): ReactNode {\r\n        const {\r\n            cartHasChanged,\r\n            isMultiShippingMode,\r\n            shouldShowOrderComments,\r\n            shouldShowShippingOptions = true,\r\n            shouldDisableSubmit,\r\n            isLoading,\r\n        } = this.props;\r\n\r\n        return (\r\n            <>\r\n                <Fieldset\r\n                    id=\"checkout-shipping-options\"\r\n                    legend={\r\n                        <>\r\n                            <Legend>\r\n                                <TranslatedString id=\"shipping.shipping_method_label\" />\r\n                            </Legend>\r\n\r\n                            {cartHasChanged && (\r\n                                <Alert type={AlertType.Error}>\r\n                                    <strong>\r\n                                        <TranslatedString id=\"shipping.cart_change_error\" />\r\n                                    </strong>\r\n                                </Alert>\r\n                            )}\r\n                        </>\r\n                    }\r\n                >\r\n                    <ShippingOptions\r\n                        isMultiShippingMode={isMultiShippingMode}\r\n                        isUpdatingAddress={isLoading}\r\n                        shouldShowShippingOptions={shouldShowShippingOptions}\r\n                    />\r\n                </Fieldset>\r\n\r\n                {shouldShowOrderComments && <OrderComments />}\r\n\r\n                <div className=\"form-actions\">\r\n                    <Button\r\n                        disabled={shouldDisableSubmit}\r\n                        id=\"checkout-shipping-continue\"\r\n                        isLoading={isLoading}\r\n                        type=\"submit\"\r\n                        variant={ButtonVariant.Primary}\r\n                    >\r\n                        <TranslatedString id=\"common.continue_action\" />\r\n                    </Button>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ShippingFormFooter;\r\n","import {\r\n    Address,\r\n    AddressRequestBody,\r\n    Cart,\r\n    CheckoutSelectors,\r\n    CheckoutStoreSelector,\r\n    Consignment,\r\n    ConsignmentAssignmentRequestBody,\r\n    Country,\r\n    CustomerAddress,\r\n    FormField,\r\n} from '@bigcommerce/checkout-sdk';\r\nimport { FormikProps, withFormik } from 'formik';\r\nimport React, { PureComponent, ReactNode } from 'react';\r\n\r\nimport { TranslatedLink, TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\r\n\r\nimport {\r\n    AddressFormModal,\r\n    AddressFormValues,\r\n    isValidAddress,\r\n    mapAddressFromFormValues,\r\n} from '../address';\r\nimport { preventDefault } from '../common/dom';\r\nimport { ErrorModal } from '../common/error';\r\nimport { Form } from '../ui/form';\r\n\r\nimport { AssignItemFailedError, AssignItemInvalidAddressError } from './errors';\r\nimport getShippableItemsCount from './getShippableItemsCount';\r\nimport getShippableLineItems from './getShippableLineItems';\r\nimport hasSelectedShippingOptions from './hasSelectedShippingOptions';\r\nimport hasUnassignedLineItems from './hasUnassignedLineItems';\r\nimport ItemAddressSelect from './ItemAddressSelect';\r\nimport ShippableItem from './ShippableItem';\r\nimport ShippingFormFooter from './ShippingFormFooter';\r\nimport updateShippableItems from './updateShippableItems';\r\n\r\nexport interface MultiShippingFormProps {\r\n    addresses: CustomerAddress[];\r\n    cart: Cart;\r\n    cartHasChanged: boolean;\r\n    consignments: Consignment[];\r\n    customerMessage: string;\r\n    isGuest: boolean;\r\n    isLoading: boolean;\r\n    shouldShowOrderComments: boolean;\r\n    defaultCountryCode?: string;\r\n    countries?: Country[];\r\n    countriesWithAutocomplete: string[];\r\n    googleMapsApiKey?: string;\r\n    shouldShowAddAddressInCheckout: boolean;\r\n    isFloatingLabelEnabled?: boolean;\r\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\r\n    onCreateAccount(): void;\r\n    createCustomerAddress(address: AddressRequestBody): void;\r\n    onSignIn(): void;\r\n    getFields(countryCode?: string): FormField[];\r\n    onSubmit(values: MultiShippingFormValues): void;\r\n    onUnhandledError(error: Error): void;\r\n    onUseNewAddress(address: Address, itemId: string): void;\r\n}\r\n\r\ninterface ShippableItemId {\r\n    key: string;\r\n    itemId: string;\r\n}\r\n\r\nexport interface MultiShippingFormState {\r\n    items: ShippableItem[];\r\n    itemAddingAddress?: ShippableItemId;\r\n    createCustomerAddressError?: Error;\r\n}\r\n\r\nclass MultiShippingForm extends PureComponent<\r\n    MultiShippingFormProps & WithLanguageProps & FormikProps<MultiShippingFormValues>,\r\n    MultiShippingFormState\r\n> {\r\n    static getDerivedStateFromProps(\r\n        { cart, consignments }: MultiShippingFormProps,\r\n        state: MultiShippingFormState,\r\n    ) {\r\n        if (!state || !state.items || getShippableItemsCount(cart) !== state.items.length) {\r\n            return { items: getShippableLineItems(cart, consignments) };\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    state: MultiShippingFormState = { items: [] };\r\n\r\n    render(): ReactNode {\r\n        const {\r\n            addresses,\r\n            consignments,\r\n            cart,\r\n            isGuest,\r\n            onSignIn,\r\n            onCreateAccount,\r\n            cartHasChanged,\r\n            shouldShowOrderComments,\r\n            isLoading,\r\n            getFields,\r\n            defaultCountryCode,\r\n            countries,\r\n            countriesWithAutocomplete,\r\n            googleMapsApiKey,\r\n            isFloatingLabelEnabled,\r\n        } = this.props;\r\n\r\n        const { items, itemAddingAddress, createCustomerAddressError } = this.state;\r\n\r\n        if (isGuest) {\r\n            return (\r\n                <div className=\"checkout-step-info\">\r\n                    <TranslatedString id=\"shipping.multishipping_guest_intro\" />{' '}\r\n                    <a\r\n                        data-test=\"shipping-sign-in-link\"\r\n                        href=\"#\"\r\n                        onClick={preventDefault(onSignIn)}\r\n                    >\r\n                        <TranslatedString id=\"shipping.multishipping_guest_sign_in\" />\r\n                    </a>{' '}\r\n                    <TranslatedLink\r\n                        id=\"shipping.multishipping_guest_create\"\r\n                        onClick={onCreateAccount}\r\n                    />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <ErrorModal\r\n                    error={createCustomerAddressError}\r\n                    message={\r\n                        <>\r\n                            <TranslatedString id=\"address.consignment_address_updated_text\" />{' '}\r\n                            <TranslatedString id=\"customer.create_address_error\" />\r\n                        </>\r\n                    }\r\n                    onClose={this.handleCloseErrorModal}\r\n                    shouldShowErrorCode={false}\r\n                />\r\n                <AddressFormModal\r\n                    countries={countries}\r\n                    countriesWithAutocomplete={countriesWithAutocomplete}\r\n                    defaultCountryCode={defaultCountryCode}\r\n                    getFields={getFields}\r\n                    googleMapsApiKey={googleMapsApiKey}\r\n                    isFloatingLabelEnabled={isFloatingLabelEnabled}\r\n                    isLoading={isLoading}\r\n                    isOpen={!!itemAddingAddress}\r\n                    onRequestClose={this.handleCloseAddAddressForm}\r\n                    onSaveAddress={this.handleSaveAddress}\r\n                />\r\n\r\n                <Form>\r\n                    <ul className=\"consignmentList\">\r\n                        {items.map((item) => (\r\n                            <li key={item.key}>\r\n                                <ItemAddressSelect\r\n                                    addresses={addresses}\r\n                                    item={item}\r\n                                    onSelectAddress={this.handleSelectAddress}\r\n                                    onUseNewAddress={this.handleUseNewAddress}\r\n                                />\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n\r\n                    <ShippingFormFooter\r\n                        cartHasChanged={cartHasChanged}\r\n                        isLoading={isLoading}\r\n                        isMultiShippingMode={true}\r\n                        shouldDisableSubmit={this.shouldDisableSubmit()}\r\n                        shouldShowOrderComments={shouldShowOrderComments}\r\n                        shouldShowShippingOptions={\r\n                            !hasUnassignedLineItems(consignments, cart.lineItems)\r\n                        }\r\n                    />\r\n                </Form>\r\n            </>\r\n        );\r\n    }\r\n\r\n    private handleCloseErrorModal: () => void = () => {\r\n        this.setState({ createCustomerAddressError: undefined });\r\n    };\r\n\r\n    private handleSaveAddress: (address: AddressFormValues) => void = async (address) => {\r\n        const { createCustomerAddress } = this.props;\r\n        const { itemAddingAddress } = this.state;\r\n\r\n        if (!itemAddingAddress) {\r\n            return;\r\n        }\r\n\r\n        const shippingAddress = mapAddressFromFormValues(address);\r\n\r\n        await this.handleSelectAddress(\r\n            shippingAddress,\r\n            itemAddingAddress.itemId,\r\n            itemAddingAddress.key,\r\n        );\r\n\r\n        try {\r\n            await createCustomerAddress(shippingAddress);\r\n        } catch (error) {\r\n            if (error instanceof Error) {\r\n                this.setState({ createCustomerAddressError: error });\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            itemAddingAddress: undefined,\r\n        });\r\n    };\r\n\r\n    private handleUseNewAddress: (address: Address, itemId: string, itemKey: string) => void = (\r\n        address,\r\n        itemId,\r\n        itemKey,\r\n    ) => {\r\n        const { onUseNewAddress, shouldShowAddAddressInCheckout } = this.props;\r\n\r\n        if (!shouldShowAddAddressInCheckout) {\r\n            onUseNewAddress(address, itemId);\r\n\r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            itemAddingAddress: {\r\n                key: itemKey,\r\n                itemId,\r\n            },\r\n        });\r\n    };\r\n\r\n    private handleCloseAddAddressForm: () => void = () => {\r\n        this.setState({\r\n            itemAddingAddress: undefined,\r\n        });\r\n    };\r\n\r\n    private handleSelectAddress: (\r\n        address: Address,\r\n        itemId: string,\r\n        itemKey: string,\r\n    ) => Promise<void> = async (address, itemId, itemKey) => {\r\n        const { assignItem, onUnhandledError, getFields } = this.props;\r\n\r\n        if (!isValidAddress(address, getFields(address.countryCode))) {\r\n            return onUnhandledError(new AssignItemInvalidAddressError());\r\n        }\r\n\r\n        try {\r\n            const { data } = await assignItem({\r\n                address,\r\n                lineItems: [\r\n                    {\r\n                        itemId,\r\n                        quantity: 1,\r\n                    },\r\n                ],\r\n            });\r\n\r\n            this.syncItems(itemKey, address, data);\r\n        } catch (error) {\r\n            if (error instanceof Error) {\r\n                onUnhandledError(new AssignItemFailedError(error));\r\n            }\r\n        }\r\n    };\r\n\r\n    private shouldDisableSubmit: () => boolean = () => {\r\n        const { isLoading, consignments } = this.props;\r\n\r\n        return isLoading || !hasSelectedShippingOptions(consignments);\r\n    };\r\n\r\n    private syncItems: (key: string, address: Address, data: CheckoutStoreSelector) => void = (\r\n        key,\r\n        address,\r\n        data,\r\n    ) => {\r\n        const { items: currentItems } = this.state;\r\n        const items = updateShippableItems(\r\n            currentItems,\r\n            {\r\n                updatedItemIndex: currentItems.findIndex((item) => item.key === key),\r\n                address,\r\n            },\r\n            {\r\n                cart: data.getCart(),\r\n                consignments: data.getConsignments(),\r\n            },\r\n        );\r\n\r\n        if (items) {\r\n            this.setState({ items });\r\n        }\r\n    };\r\n}\r\n\r\nexport interface MultiShippingFormValues {\r\n    orderComment: string;\r\n}\r\n\r\nexport default withLanguage(\r\n    withFormik<MultiShippingFormProps & WithLanguageProps, MultiShippingFormValues>({\r\n        handleSubmit: (values, { props: { onSubmit } }) => {\r\n            onSubmit(values);\r\n        },\r\n        mapPropsToValues: ({ customerMessage }) => ({\r\n            orderComment: customerMessage,\r\n        }),\r\n        enableReinitialize: true,\r\n    })(MultiShippingForm),\r\n);\r\n","import { Address, Cart, Consignment } from '@bigcommerce/checkout-sdk';\r\n\r\nimport { isEqualAddress } from '../address';\r\n\r\nimport findConsignment from './findConsignment';\r\nimport ShippableItem from './ShippableItem';\r\n\r\nexport interface UpdateItemParams {\r\n    updatedItemIndex: number;\r\n    address: Address;\r\n}\r\n\r\nexport default function updateShippableItems(\r\n    items: ShippableItem[],\r\n    { updatedItemIndex, address }: UpdateItemParams,\r\n    { cart, consignments }: { cart?: Cart; consignments?: Consignment[] },\r\n): ShippableItem[] | undefined {\r\n    if (updatedItemIndex < 0 || updatedItemIndex >= items.length || !cart) {\r\n        return;\r\n    }\r\n\r\n    const cartItemIds = cart.lineItems.physicalItems.map(({ id }) => id);\r\n\r\n    const updatedConsignment = (consignments || []).find((consignment) =>\r\n        isEqualAddress(consignment.shippingAddress, address),\r\n    );\r\n\r\n    const newId = findNewItemId(items[updatedItemIndex], cart, updatedConsignment);\r\n\r\n    return items.map((item, i) => {\r\n        if ((newId && !cartItemIds.includes(item.id)) || i === updatedItemIndex) {\r\n            const itemId = newId ?? item.id;\r\n\r\n            return {\r\n                ...item,\r\n                id: itemId,\r\n                consignment: findConsignment(consignments || [], itemId as string),\r\n            };\r\n        }\r\n\r\n        return item;\r\n    });\r\n}\r\n\r\nfunction findNewItemId(\r\n    item: ShippableItem,\r\n    cart?: Cart,\r\n    consignment?: Consignment,\r\n): string | undefined {\r\n    if (!cart || !consignment) {\r\n        return;\r\n    }\r\n\r\n    const { physicalItems } = cart.lineItems;\r\n    const matchingCartItems = physicalItems.filter(\r\n        ({ productId, variantId }) => productId === item.productId && variantId === item.variantId,\r\n    );\r\n\r\n    const matchingCartItemIds = matchingCartItems.map(({ id }) => id);\r\n\r\n    return consignment.lineItemIds.find((id) => matchingCartItemIds.includes(id));\r\n}\r\n","import React, { FunctionComponent, memo, useMemo } from 'react';\r\n\r\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\r\n\r\nimport { CheckboxFormField } from '../ui/form';\r\n\r\nexport interface BillingSameAsShippingFieldProps {\r\n    onChange?(isChecked: boolean): void;\r\n}\r\n\r\nconst BillingSameAsShippingField: FunctionComponent<BillingSameAsShippingFieldProps> = ({\r\n    onChange,\r\n}) => {\r\n    const labelContent = useMemo(\r\n        () => <TranslatedString id=\"billing.use_shipping_address_label\" />,\r\n        [],\r\n    );\r\n\r\n    return (\r\n        <CheckboxFormField\r\n            id=\"sameAsBilling\"\r\n            labelContent={labelContent}\r\n            name=\"billingSameAsShipping\"\r\n            onChange={onChange}\r\n        />\r\n    );\r\n};\r\n\r\nexport default memo(BillingSameAsShippingField);\r\n","import {\r\n    Address,\r\n    Consignment,\r\n    Country,\r\n    CustomerAddress,\r\n    FormField,\r\n} from '@bigcommerce/checkout-sdk';\r\nimport React, { Component, ReactNode } from 'react';\r\n\r\nimport { AddressForm, AddressSelect, isValidCustomerAddress } from '../address';\r\nimport { connectFormik, ConnectFormikProps } from '../common/form';\r\nimport { Fieldset } from '../ui/form';\r\nimport { LoadingOverlay } from '../ui/loading';\r\n\r\nimport { SingleShippingFormValues } from './SingleShippingForm';\r\n\r\nexport interface ShippingAddressFormProps {\r\n    addresses: CustomerAddress[];\r\n    address?: Address;\r\n    consignments: Consignment[];\r\n    countries?: Country[];\r\n    countriesWithAutocomplete: string[];\r\n    googleMapsApiKey?: string;\r\n    isLoading: boolean;\r\n    formFields: FormField[];\r\n    shouldShowSaveAddress?: boolean;\r\n    isFloatingLabelEnabled?: boolean;\r\n    onUseNewAddress(): void;\r\n    onFieldChange(fieldName: string, value: string): void;\r\n    onAddressSelect(address: Address): void;\r\n}\r\n\r\nconst addressFieldName = 'shippingAddress';\r\n\r\nclass ShippingAddressForm extends Component<\r\n    ShippingAddressFormProps & ConnectFormikProps<SingleShippingFormValues>\r\n> {\r\n    render(): ReactNode {\r\n        const {\r\n            addresses,\r\n            address: shippingAddress,\r\n            onAddressSelect,\r\n            onUseNewAddress,\r\n            shouldShowSaveAddress,\r\n            countries,\r\n            countriesWithAutocomplete,\r\n            formFields,\r\n            isLoading,\r\n            googleMapsApiKey,\r\n            isFloatingLabelEnabled,\r\n            formik: {\r\n                values: { shippingAddress: formAddress },\r\n            },\r\n        } = this.props;\r\n\r\n        const hasAddresses = addresses && addresses.length > 0;\r\n        const hasValidCustomerAddress = isValidCustomerAddress(\r\n            shippingAddress,\r\n            addresses,\r\n            formFields,\r\n        );\r\n\r\n        return (\r\n            <Fieldset id=\"checkoutShippingAddress\">\r\n                {hasAddresses && (\r\n                    <Fieldset id=\"shippingAddresses\">\r\n                        <LoadingOverlay isLoading={isLoading}>\r\n                            <AddressSelect\r\n                                addresses={addresses}\r\n                                onSelectAddress={onAddressSelect}\r\n                                onUseNewAddress={onUseNewAddress}\r\n                                selectedAddress={\r\n                                    hasValidCustomerAddress ? shippingAddress : undefined\r\n                                }\r\n                            />\r\n                        </LoadingOverlay>\r\n                    </Fieldset>\r\n                )}\r\n\r\n                {!hasValidCustomerAddress && (\r\n                    <LoadingOverlay isLoading={isLoading} unmountContentWhenLoading>\r\n                        <AddressForm\r\n                            countries={countries}\r\n                            countriesWithAutocomplete={countriesWithAutocomplete}\r\n                            countryCode={formAddress && formAddress.countryCode}\r\n                            fieldName={addressFieldName}\r\n                            formFields={formFields}\r\n                            googleMapsApiKey={googleMapsApiKey}\r\n                            isFloatingLabelEnabled={isFloatingLabelEnabled}\r\n                            onAutocompleteToggle={this.handleAutocompleteToggle}\r\n                            onChange={this.handleChange}\r\n                            setFieldValue={this.setFieldValue}\r\n                            shouldShowSaveAddress={shouldShowSaveAddress}\r\n                        />\r\n                    </LoadingOverlay>\r\n                )}\r\n            </Fieldset>\r\n        );\r\n    }\r\n\r\n    private setFieldValue: (fieldName: string, fieldValue: string) => void = (\r\n        fieldName,\r\n        fieldValue,\r\n    ) => {\r\n        const {\r\n            formik: { setFieldValue },\r\n            formFields,\r\n        } = this.props;\r\n\r\n        const customFormFieldNames = formFields\r\n            .filter((field) => field.custom)\r\n            .map((field) => field.name);\r\n\r\n        const formFieldName = customFormFieldNames.includes(fieldName)\r\n            ? `customFields.${fieldName}`\r\n            : fieldName;\r\n\r\n        setFieldValue(`${addressFieldName}.${formFieldName}`, fieldValue);\r\n    };\r\n\r\n    private handleChange: (fieldName: string, value: string) => void = (fieldName, value) => {\r\n        const { onFieldChange } = this.props;\r\n\r\n        onFieldChange(fieldName, value);\r\n    };\r\n\r\n    private handleAutocompleteToggle: (state: { inputValue: string; isOpen: boolean }) => void = ({\r\n        isOpen,\r\n        inputValue,\r\n    }) => {\r\n        const { onFieldChange } = this.props;\r\n\r\n        if (!isOpen) {\r\n            onFieldChange('address1', inputValue);\r\n        }\r\n    };\r\n}\r\n\r\nexport default connectFormik(ShippingAddressForm);\r\n","import {\r\n    Address,\r\n    CheckoutSelectors,\r\n    FormField,\r\n    ShippingInitializeOptions,\r\n    ShippingRequestOptions,\r\n} from '@bigcommerce/checkout-sdk';\r\nimport { noop } from 'lodash';\r\nimport React, { PureComponent, ReactNode } from 'react';\r\n\r\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\r\n\r\nimport { StaticAddress } from '../address/';\r\nimport { preventDefault } from '../common/dom';\r\nimport { Button, ButtonSize, ButtonVariant } from '../ui/button';\r\nimport { DynamicFormField, Fieldset } from '../ui/form';\r\nimport { LoadingOverlay } from '../ui/loading';\r\n\r\nimport './StaticAddressEditable.scss';\r\n\r\nexport interface StaticAddressEditableProps {\r\n    address: Address;\r\n    buttonId: string;\r\n    formFields: FormField[];\r\n    isLoading: boolean;\r\n    methodId?: string;\r\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\r\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\r\n    onFieldChange(fieldName: string, value: string): void;\r\n    onUnhandledError?(error: Error): void;\r\n}\r\n\r\nclass StaticAddressEditable extends PureComponent<StaticAddressEditableProps> {\r\n    async componentDidMount(): Promise<void> {\r\n        const { initialize, methodId, onUnhandledError = noop } = this.props;\r\n\r\n        try {\r\n            await initialize({ methodId });\r\n        } catch (error) {\r\n            onUnhandledError(error);\r\n        }\r\n    }\r\n\r\n    async componentWillUnmount(): Promise<void> {\r\n        const { deinitialize, methodId, onUnhandledError = noop } = this.props;\r\n\r\n        try {\r\n            await deinitialize({ methodId });\r\n        } catch (error) {\r\n            onUnhandledError(error);\r\n        }\r\n    }\r\n\r\n    render(): ReactNode {\r\n        const { address, buttonId, formFields, isLoading } = this.props;\r\n\r\n        const customFormFields = formFields.filter(({ custom }) => custom);\r\n        const shouldShowCustomFormFields = customFormFields.length > 0;\r\n\r\n        return (\r\n            <LoadingOverlay isLoading={isLoading}>\r\n                <div className=\"stepHeader\" style={{ padding: 0 }}>\r\n                    <div className=\"stepHeader-body subheader\">\r\n                        <StaticAddress address={address} />\r\n                    </div>\r\n\r\n                    <div className=\"stepHeader-actions subheader\">\r\n                        <Button\r\n                            id={buttonId}\r\n                            onClick={preventDefault()}\r\n                            size={ButtonSize.Tiny}\r\n                            testId=\"step-edit-button\"\r\n                            variant={ButtonVariant.Secondary}\r\n                        >\r\n                            <TranslatedString id=\"common.edit_action\" />\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n\r\n                {shouldShowCustomFormFields && (\r\n                    <Fieldset id=\"customFieldset\">\r\n                        {customFormFields.map((field) => (\r\n                            <DynamicFormField\r\n                                field={field}\r\n                                key={`${field.id}-${field.name}`}\r\n                                onChange={this.handleFieldValueChange(field.name)}\r\n                                parentFieldName=\"shippingAddress.customFields\"\r\n                            />\r\n                        ))}\r\n                    </Fieldset>\r\n                )}\r\n            </LoadingOverlay>\r\n        );\r\n    }\r\n\r\n    private handleFieldValueChange: (name: string) => (value: string) => void =\r\n        (name) => (value) => {\r\n            const { onFieldChange } = this.props;\r\n\r\n            onFieldChange(name, value);\r\n        };\r\n}\r\n\r\nexport default StaticAddressEditable;\r\n","import {\r\n    Address,\r\n    CheckoutSelectors,\r\n    Consignment,\r\n    Country,\r\n    CustomerAddress,\r\n    FormField,\r\n    ShippingInitializeOptions,\r\n    ShippingRequestOptions,\r\n} from '@bigcommerce/checkout-sdk';\r\nimport { memoizeOne } from '@bigcommerce/memoize';\r\nimport React, { FunctionComponent, memo, useCallback, useContext } from 'react';\r\n\r\nimport { FormContext } from '../ui/form';\r\n\r\nimport ShippingAddressForm from './ShippingAddressForm';\r\nimport StaticAddressEditable from './StaticAddressEditable';\r\n\r\nexport interface ShippingAddressProps {\r\n    addresses: CustomerAddress[];\r\n    consignments: Consignment[];\r\n    countries?: Country[];\r\n    countriesWithAutocomplete: string[];\r\n    formFields: FormField[];\r\n    googleMapsApiKey?: string;\r\n    isLoading: boolean;\r\n    isShippingStepPending: boolean;\r\n    methodId?: string;\r\n    shippingAddress?: Address;\r\n    shouldShowSaveAddress?: boolean;\r\n    hasRequestedShippingOptions: boolean;\r\n    isFloatingLabelEnabled?: boolean;\r\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\r\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\r\n    onAddressSelect(address: Address): void;\r\n    onFieldChange(name: string, value: string): void;\r\n    onUnhandledError?(error: Error): void;\r\n    onUseNewAddress(): void;\r\n}\r\n\r\nconst ShippingAddress: FunctionComponent<ShippingAddressProps> = (props) => {\r\n    const {\r\n        methodId,\r\n        formFields,\r\n        countries,\r\n        countriesWithAutocomplete,\r\n        consignments,\r\n        googleMapsApiKey,\r\n        onAddressSelect,\r\n        onFieldChange,\r\n        onUseNewAddress,\r\n        initialize,\r\n        deinitialize,\r\n        isLoading,\r\n        shippingAddress,\r\n        hasRequestedShippingOptions,\r\n        addresses,\r\n        shouldShowSaveAddress,\r\n        isShippingStepPending,\r\n        isFloatingLabelEnabled,\r\n    } = props;\r\n\r\n    const { setSubmitted } = useContext(FormContext);\r\n\r\n    const initializeShipping = useCallback(\r\n        memoizeOne(\r\n            (defaultOptions: ShippingInitializeOptions) => (options?: ShippingInitializeOptions) =>\r\n                initialize({\r\n                    ...defaultOptions,\r\n                    ...options,\r\n                }),\r\n        ),\r\n        [],\r\n    );\r\n\r\n    const handleFieldChange: (fieldName: string, value: string) => void = (fieldName, value) => {\r\n        if (hasRequestedShippingOptions) {\r\n            setSubmitted(true);\r\n        }\r\n\r\n        onFieldChange(fieldName, value);\r\n    };\r\n\r\n    if (methodId) {\r\n        let options: ShippingInitializeOptions = {};\r\n\r\n        if (methodId === 'amazonpay' && shippingAddress) {\r\n            const editAddressButtonId = 'edit-ship-button';\r\n\r\n            options = {\r\n                amazonpay: {\r\n                    editAddressButtonId,\r\n                },\r\n            };\r\n\r\n            return (\r\n                <StaticAddressEditable\r\n                    address={shippingAddress}\r\n                    buttonId={editAddressButtonId}\r\n                    deinitialize={deinitialize}\r\n                    formFields={formFields}\r\n                    initialize={initializeShipping(options)}\r\n                    isLoading={isShippingStepPending}\r\n                    methodId={methodId}\r\n                    onFieldChange={onFieldChange}\r\n                />\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <ShippingAddressForm\r\n            address={shippingAddress}\r\n            addresses={addresses}\r\n            consignments={consignments}\r\n            countries={countries}\r\n            countriesWithAutocomplete={countriesWithAutocomplete}\r\n            formFields={formFields}\r\n            googleMapsApiKey={googleMapsApiKey}\r\n            isFloatingLabelEnabled={isFloatingLabelEnabled}\r\n            isLoading={isLoading}\r\n            onAddressSelect={onAddressSelect}\r\n            onFieldChange={handleFieldChange}\r\n            onUseNewAddress={onUseNewAddress}\r\n            shouldShowSaveAddress={shouldShowSaveAddress}\r\n        />\r\n    );\r\n};\r\n\r\nexport default memo(ShippingAddress);\r\n","export const SHIPPING_ADDRESS_FIELDS = [\r\n    'address1',\r\n    'postalCode',\r\n    'countryCode',\r\n    'city',\r\n    'stateOrProvince',\r\n    'stateOrProvinceCode',\r\n];\r\n","import {\r\n    Address,\r\n    CheckoutParams,\r\n    CheckoutSelectors,\r\n    Consignment,\r\n    Country,\r\n    CustomerAddress,\r\n    CustomerRequestOptions,\r\n    FormField,\r\n    RequestOptions,\r\n    ShippingInitializeOptions,\r\n    ShippingRequestOptions,\r\n} from '@bigcommerce/checkout-sdk';\r\nimport { FormikProps, withFormik } from 'formik';\r\nimport { debounce, isEqual, noop } from 'lodash';\r\nimport React, { PureComponent, ReactNode } from 'react';\r\nimport { lazy, object } from 'yup';\r\n\r\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\r\n\r\nimport {\r\n    AddressFormValues,\r\n    getAddressFormFieldsValidationSchema,\r\n    getTranslateAddressError,\r\n    isEqualAddress,\r\n    mapAddressFromFormValues,\r\n    mapAddressToFormValues,\r\n} from '../address';\r\nimport { getCustomFormFieldsValidationSchema } from '../formFields';\r\nimport { Fieldset, Form, FormContext } from '../ui/form';\r\n\r\nimport BillingSameAsShippingField from './BillingSameAsShippingField';\r\nimport hasSelectedShippingOptions from './hasSelectedShippingOptions';\r\nimport ShippingAddress from './ShippingAddress';\r\nimport { SHIPPING_ADDRESS_FIELDS } from './ShippingAddressFields';\r\nimport ShippingFormFooter from './ShippingFormFooter';\r\n\r\nexport interface SingleShippingFormProps {\r\n    addresses: CustomerAddress[];\r\n    isBillingSameAsShipping: boolean;\r\n    cartHasChanged: boolean;\r\n    consignments: Consignment[];\r\n    countries: Country[];\r\n    countriesWithAutocomplete: string[];\r\n    customerMessage: string;\r\n    googleMapsApiKey?: string;\r\n    isLoading: boolean;\r\n    isShippingStepPending: boolean;\r\n    isMultiShippingMode: boolean;\r\n    methodId?: string;\r\n    shippingAddress?: Address;\r\n    shouldShowSaveAddress?: boolean;\r\n    shouldShowOrderComments: boolean;\r\n    isFloatingLabelEnabled?: boolean;\r\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\r\n    deleteConsignments(): Promise<Address | undefined>;\r\n    getFields(countryCode?: string): FormField[];\r\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\r\n    onSubmit(values: SingleShippingFormValues): void;\r\n    onUnhandledError?(error: Error): void;\r\n    signOut(options?: CustomerRequestOptions): void;\r\n    updateAddress(\r\n        address: Partial<Address>,\r\n        options?: RequestOptions<CheckoutParams>,\r\n    ): Promise<CheckoutSelectors>;\r\n}\r\n\r\nexport interface SingleShippingFormValues {\r\n    billingSameAsShipping: boolean;\r\n    shippingAddress?: AddressFormValues;\r\n    orderComment: string;\r\n}\r\n\r\ninterface SingleShippingFormState {\r\n    isResettingAddress: boolean;\r\n    isUpdatingShippingData: boolean;\r\n    hasRequestedShippingOptions: boolean;\r\n}\r\n\r\nexport const SHIPPING_AUTOSAVE_DELAY = 1700;\r\n\r\nclass SingleShippingForm extends PureComponent<\r\n    SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>\r\n> {\r\n    static contextType = FormContext;\r\n\r\n    state: SingleShippingFormState = {\r\n        isResettingAddress: false,\r\n        isUpdatingShippingData: false,\r\n        hasRequestedShippingOptions: false,\r\n    };\r\n\r\n    private debouncedUpdateAddress: any;\r\n\r\n    constructor(\r\n        props: SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>,\r\n    ) {\r\n        super(props);\r\n\r\n        const { updateAddress } = this.props;\r\n\r\n        this.debouncedUpdateAddress = debounce(\r\n            async (address: Address, includeShippingOptions: boolean) => {\r\n                try {\r\n                    await updateAddress(address, {\r\n                        params: {\r\n                            include: {\r\n                                'consignments.availableShippingOptions': includeShippingOptions,\r\n                            },\r\n                        },\r\n                    });\r\n\r\n                    if (includeShippingOptions) {\r\n                        this.setState({ hasRequestedShippingOptions: true });\r\n                    }\r\n                } finally {\r\n                    this.setState({ isUpdatingShippingData: false });\r\n                }\r\n            },\r\n            SHIPPING_AUTOSAVE_DELAY,\r\n        );\r\n    }\r\n\r\n    render(): ReactNode {\r\n        const {\r\n            addresses,\r\n            cartHasChanged,\r\n            isLoading,\r\n            onUnhandledError,\r\n            methodId,\r\n            shouldShowSaveAddress,\r\n            countries,\r\n            countriesWithAutocomplete,\r\n            googleMapsApiKey,\r\n            shippingAddress,\r\n            consignments,\r\n            shouldShowOrderComments,\r\n            initialize,\r\n            isValid,\r\n            deinitialize,\r\n            values: { shippingAddress: addressForm },\r\n            isShippingStepPending,\r\n            isFloatingLabelEnabled,\r\n        } = this.props;\r\n\r\n        const { isResettingAddress, isUpdatingShippingData, hasRequestedShippingOptions } =\r\n            this.state;\r\n\r\n        const PAYMENT_METHOD_VALID = ['amazonpay'];\r\n        const shouldShowBillingSameAsShipping = !PAYMENT_METHOD_VALID.some(\r\n            (method) => method === methodId,\r\n        );\r\n\r\n        return (\r\n            <Form autoComplete=\"on\">\r\n                <Fieldset>\r\n                    <ShippingAddress\r\n                        addresses={addresses}\r\n                        consignments={consignments}\r\n                        countries={countries}\r\n                        countriesWithAutocomplete={countriesWithAutocomplete}\r\n                        deinitialize={deinitialize}\r\n                        formFields={this.getFields(addressForm && addressForm.countryCode)}\r\n                        googleMapsApiKey={googleMapsApiKey}\r\n                        hasRequestedShippingOptions={hasRequestedShippingOptions}\r\n                        initialize={initialize}\r\n                        isFloatingLabelEnabled={isFloatingLabelEnabled}\r\n                        isLoading={isResettingAddress}\r\n                        isShippingStepPending={isShippingStepPending}\r\n                        methodId={methodId}\r\n                        onAddressSelect={this.handleAddressSelect}\r\n                        onFieldChange={this.handleFieldChange}\r\n                        onUnhandledError={onUnhandledError}\r\n                        onUseNewAddress={this.onUseNewAddress}\r\n                        shippingAddress={shippingAddress}\r\n                        shouldShowSaveAddress={shouldShowSaveAddress}\r\n                    />\r\n                    {shouldShowBillingSameAsShipping && (\r\n                        <div className=\"form-body\">\r\n                            <BillingSameAsShippingField />\r\n                        </div>\r\n                    )}\r\n                </Fieldset>\r\n\r\n                <ShippingFormFooter\r\n                    cartHasChanged={cartHasChanged}\r\n                    isLoading={isLoading || isUpdatingShippingData}\r\n                    isMultiShippingMode={false}\r\n                    shouldDisableSubmit={this.shouldDisableSubmit()}\r\n                    shouldShowOrderComments={shouldShowOrderComments}\r\n                    shouldShowShippingOptions={isValid}\r\n                />\r\n            </Form>\r\n        );\r\n    }\r\n\r\n    private shouldDisableSubmit: () => boolean = () => {\r\n        const { isLoading, consignments, isValid } = this.props;\r\n\r\n        const { isUpdatingShippingData } = this.state;\r\n\r\n        if (!isValid) {\r\n            return false;\r\n        }\r\n\r\n        return isLoading || isUpdatingShippingData || !hasSelectedShippingOptions(consignments);\r\n    };\r\n\r\n    private handleFieldChange: (name: string) => void = async (name) => {\r\n        const { setFieldValue } = this.props;\r\n\r\n        if (name === 'countryCode') {\r\n            setFieldValue('shippingAddress.stateOrProvince', '');\r\n            setFieldValue('shippingAddress.stateOrProvinceCode', '');\r\n        }\r\n\r\n        // Enqueue the following code to run after Formik has run validation\r\n        await new Promise((resolve) => setTimeout(resolve));\r\n\r\n        const isShippingField = SHIPPING_ADDRESS_FIELDS.includes(name);\r\n\r\n        const { hasRequestedShippingOptions } = this.state;\r\n\r\n        const { isValid } = this.props;\r\n\r\n        if (!isValid) {\r\n            return;\r\n        }\r\n\r\n        this.updateAddressWithFormData(isShippingField || !hasRequestedShippingOptions);\r\n    };\r\n\r\n    private updateAddressWithFormData(includeShippingOptions: boolean) {\r\n        const {\r\n            shippingAddress,\r\n            values: { shippingAddress: addressForm },\r\n        } = this.props;\r\n\r\n        const updatedShippingAddress = addressForm && mapAddressFromFormValues(addressForm);\r\n\r\n        if (Array.isArray(shippingAddress?.customFields)) {\r\n            includeShippingOptions = !isEqual(\r\n                shippingAddress?.customFields,\r\n                updatedShippingAddress?.customFields\r\n            ) || includeShippingOptions;\r\n        }\r\n\r\n        if (!updatedShippingAddress || isEqualAddress(updatedShippingAddress, shippingAddress)) {\r\n            return;\r\n        }\r\n\r\n        this.setState({ isUpdatingShippingData: true });\r\n        this.debouncedUpdateAddress(updatedShippingAddress, includeShippingOptions);\r\n    }\r\n\r\n    private handleAddressSelect: (address: Address) => void = async (address) => {\r\n        const { updateAddress, onUnhandledError = noop, values, setValues } = this.props;\r\n\r\n        this.setState({ isResettingAddress: true });\r\n\r\n        try {\r\n            await updateAddress(address);\r\n\r\n            setValues({\r\n                ...values,\r\n                shippingAddress: mapAddressToFormValues(\r\n                    this.getFields(address.countryCode),\r\n                    address,\r\n                ),\r\n            });\r\n        } catch (error) {\r\n            onUnhandledError(error);\r\n        } finally {\r\n            this.setState({ isResettingAddress: false });\r\n        }\r\n    };\r\n\r\n    private onUseNewAddress: () => void = async () => {\r\n        const { deleteConsignments, onUnhandledError = noop, setValues, values } = this.props;\r\n\r\n        this.setState({ isResettingAddress: true });\r\n\r\n        try {\r\n            const address = await deleteConsignments();\r\n\r\n            setValues({\r\n                ...values,\r\n                shippingAddress: mapAddressToFormValues(\r\n                    this.getFields(address && address.countryCode),\r\n                    address,\r\n                ),\r\n            });\r\n        } catch (e) {\r\n            onUnhandledError(e);\r\n        } finally {\r\n            this.setState({ isResettingAddress: false });\r\n        }\r\n    };\r\n\r\n    private getFields(countryCode: string | undefined): FormField[] {\r\n        const { getFields } = this.props;\r\n\r\n        return getFields(countryCode);\r\n    }\r\n}\r\n\r\nexport default withLanguage(\r\n    withFormik<SingleShippingFormProps & WithLanguageProps, SingleShippingFormValues>({\r\n        handleSubmit: (values, { props: { onSubmit } }) => {\r\n            onSubmit(values);\r\n        },\r\n        mapPropsToValues: ({\r\n            getFields,\r\n            shippingAddress,\r\n            isBillingSameAsShipping,\r\n            customerMessage,\r\n        }) => ({\r\n            billingSameAsShipping: isBillingSameAsShipping,\r\n            orderComment: customerMessage,\r\n            shippingAddress: mapAddressToFormValues(\r\n                getFields(shippingAddress && shippingAddress.countryCode),\r\n                shippingAddress,\r\n            ),\r\n        }),\r\n        isInitialValid: ({ shippingAddress, getFields, language }) =>\r\n            !!shippingAddress &&\r\n            getAddressFormFieldsValidationSchema({\r\n                language,\r\n                formFields: getFields(shippingAddress.countryCode),\r\n            }).isValidSync(shippingAddress),\r\n        validationSchema: ({\r\n            language,\r\n            getFields,\r\n            methodId,\r\n        }: SingleShippingFormProps & WithLanguageProps) =>\r\n            methodId\r\n                ? object({\r\n                      shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\r\n                          getCustomFormFieldsValidationSchema({\r\n                              translate: getTranslateAddressError(language),\r\n                              formFields: getFields(formValues && formValues.countryCode),\r\n                          }),\r\n                      ),\r\n                  })\r\n                : object({\r\n                      shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\r\n                          getAddressFormFieldsValidationSchema({\r\n                              language,\r\n                              formFields: getFields(formValues && formValues.countryCode),\r\n                          }),\r\n                      ),\r\n                  }),\r\n        enableReinitialize: false,\r\n    })(SingleShippingForm),\r\n);\r\n","import {\r\n    Address,\r\n    AddressRequestBody,\r\n    Cart,\r\n    CheckoutParams,\r\n    CheckoutSelectors,\r\n    Consignment,\r\n    ConsignmentAssignmentRequestBody,\r\n    Country,\r\n    CustomerAddress,\r\n    CustomerRequestOptions,\r\n    FormField,\r\n    RequestOptions,\r\n    ShippingInitializeOptions,\r\n    ShippingRequestOptions,\r\n} from '@bigcommerce/checkout-sdk';\r\nimport React, { Component, ReactNode } from 'react';\r\n\r\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\r\n\r\nimport MultiShippingForm, { MultiShippingFormValues } from './MultiShippingForm';\r\nimport SingleShippingForm, { SingleShippingFormValues } from './SingleShippingForm';\r\n\r\nexport interface ShippingFormProps {\r\n    addresses: CustomerAddress[];\r\n    cart: Cart;\r\n    cartHasChanged: boolean;\r\n    consignments: Consignment[];\r\n    countries: Country[];\r\n    countriesWithAutocomplete: string[];\r\n    customerMessage: string;\r\n    googleMapsApiKey?: string;\r\n    isBillingSameAsShipping: boolean;\r\n    isGuest: boolean;\r\n    isLoading: boolean;\r\n    isShippingStepPending: boolean;\r\n    isMultiShippingMode: boolean;\r\n    methodId?: string;\r\n    shippingAddress?: Address;\r\n    shouldShowSaveAddress?: boolean;\r\n    shouldShowOrderComments: boolean;\r\n    shouldShowAddAddressInCheckout: boolean;\r\n    isFloatingLabelEnabled?: boolean;\r\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\r\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\r\n    deleteConsignments(): Promise<Address | undefined>;\r\n    getFields(countryCode?: string): FormField[];\r\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\r\n    onCreateAccount(): void;\r\n    createCustomerAddress(address: AddressRequestBody): Promise<CheckoutSelectors>;\r\n    onMultiShippingSubmit(values: MultiShippingFormValues): void;\r\n    onSignIn(): void;\r\n    onSingleShippingSubmit(values: SingleShippingFormValues): void;\r\n    onUnhandledError(error: Error): void;\r\n    onUseNewAddress(address: Address, itemId: string): void;\r\n    signOut(options?: CustomerRequestOptions): void;\r\n    updateAddress(\r\n        address: Partial<Address>,\r\n        options: RequestOptions<CheckoutParams>,\r\n    ): Promise<CheckoutSelectors>;\r\n}\r\n\r\nclass ShippingForm extends Component<ShippingFormProps & WithLanguageProps> {\r\n    render(): ReactNode {\r\n        const {\r\n            addresses,\r\n            assignItem,\r\n            cart,\r\n            cartHasChanged,\r\n            createCustomerAddress,\r\n            consignments,\r\n            countries,\r\n            countriesWithAutocomplete,\r\n            onCreateAccount,\r\n            customerMessage,\r\n            deinitialize,\r\n            deleteConsignments,\r\n            getFields,\r\n            googleMapsApiKey,\r\n            initialize,\r\n            isBillingSameAsShipping,\r\n            isGuest,\r\n            isLoading,\r\n            isMultiShippingMode,\r\n            methodId,\r\n            onMultiShippingSubmit,\r\n            onSignIn,\r\n            onSingleShippingSubmit,\r\n            onUnhandledError,\r\n            onUseNewAddress,\r\n            shippingAddress,\r\n            shouldShowOrderComments,\r\n            shouldShowSaveAddress,\r\n            shouldShowAddAddressInCheckout,\r\n            signOut,\r\n            updateAddress,\r\n            isShippingStepPending,\r\n            isFloatingLabelEnabled,\r\n        } = this.props;\r\n\r\n        return isMultiShippingMode ? (\r\n            <MultiShippingForm\r\n                addresses={addresses}\r\n                assignItem={assignItem}\r\n                cart={cart}\r\n                cartHasChanged={cartHasChanged}\r\n                consignments={consignments}\r\n                countries={countries}\r\n                countriesWithAutocomplete={countriesWithAutocomplete}\r\n                createCustomerAddress={createCustomerAddress}\r\n                customerMessage={customerMessage}\r\n                defaultCountryCode={shippingAddress?.countryCode}\r\n                getFields={getFields}\r\n                googleMapsApiKey={googleMapsApiKey}\r\n                isFloatingLabelEnabled={isFloatingLabelEnabled}\r\n                isGuest={isGuest}\r\n                isLoading={isLoading}\r\n                onCreateAccount={onCreateAccount}\r\n                onSignIn={onSignIn}\r\n                onSubmit={onMultiShippingSubmit}\r\n                onUnhandledError={onUnhandledError}\r\n                onUseNewAddress={onUseNewAddress}\r\n                shouldShowAddAddressInCheckout={shouldShowAddAddressInCheckout}\r\n                shouldShowOrderComments={shouldShowOrderComments}\r\n            />\r\n        ) : (\r\n            <SingleShippingForm\r\n                addresses={addresses}\r\n                cartHasChanged={cartHasChanged}\r\n                consignments={consignments}\r\n                countries={countries}\r\n                countriesWithAutocomplete={countriesWithAutocomplete}\r\n                customerMessage={customerMessage}\r\n                deinitialize={deinitialize}\r\n                deleteConsignments={deleteConsignments}\r\n                getFields={getFields}\r\n                googleMapsApiKey={googleMapsApiKey}\r\n                initialize={initialize}\r\n                isBillingSameAsShipping={isBillingSameAsShipping}\r\n                isFloatingLabelEnabled={isFloatingLabelEnabled}\r\n                isLoading={isLoading}\r\n                isMultiShippingMode={isMultiShippingMode}\r\n                isShippingStepPending={isShippingStepPending}\r\n                methodId={methodId}\r\n                onSubmit={onSingleShippingSubmit}\r\n                onUnhandledError={onUnhandledError}\r\n                shippingAddress={shippingAddress}\r\n                shouldShowOrderComments={shouldShowOrderComments}\r\n                shouldShowSaveAddress={shouldShowSaveAddress}\r\n                signOut={signOut}\r\n                updateAddress={updateAddress}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default withLanguage(ShippingForm);\r\n","import React, { FunctionComponent, memo } from 'react';\r\n\r\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\r\n\r\nimport { preventDefault } from '../common/dom';\r\nimport { Legend } from '../ui/form';\r\n\r\ninterface ShippingHeaderProps {\r\n    isMultiShippingMode: boolean;\r\n    isGuest: boolean;\r\n    shouldShowMultiShipping: boolean;\r\n    onMultiShippingChange(): void;\r\n}\r\n\r\nconst ShippingHeader: FunctionComponent<ShippingHeaderProps> = ({\r\n    isMultiShippingMode,\r\n    isGuest,\r\n    onMultiShippingChange,\r\n    shouldShowMultiShipping,\r\n}) => (\r\n    <div className=\"form-legend-container\">\r\n        <Legend testId=\"shipping-address-heading\">\r\n            <TranslatedString\r\n                id={\r\n                    isMultiShippingMode\r\n                        ? isGuest\r\n                            ? 'shipping.multishipping_address_heading_guest'\r\n                            : 'shipping.multishipping_address_heading'\r\n                        : 'shipping.shipping_address_heading'\r\n                }\r\n            />\r\n        </Legend>\r\n\r\n        {shouldShowMultiShipping && (\r\n            <a\r\n                data-test=\"shipping-mode-toggle\"\r\n                href=\"#\"\r\n                onClick={preventDefault(onMultiShippingChange)}\r\n            >\r\n                <TranslatedString\r\n                    id={isMultiShippingMode ? 'shipping.ship_to_single' : 'shipping.ship_to_multi'}\r\n                />\r\n            </a>\r\n        )}\r\n    </div>\r\n);\r\n\r\nexport default memo(ShippingHeader);\r\n","import { CheckoutSelectors, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\r\nimport { noop } from 'lodash';\r\nimport React, { PureComponent, ReactNode } from 'react';\r\n\r\nexport interface StripeupeShippingAddressProps {\r\n    methodId?: string;\r\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\r\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\r\n    onUnhandledError?(error: Error): void;\r\n}\r\n\r\nclass StripeShippingAddressDisplay extends PureComponent<StripeupeShippingAddressProps> {\r\n    async componentDidMount(): Promise<void> {\r\n        const {\r\n            initialize,\r\n            methodId,\r\n            onUnhandledError = noop,\r\n        } = this.props;\r\n\r\n        try {\r\n            await initialize({ methodId });\r\n        } catch (error) {\r\n            onUnhandledError(error);\r\n        }\r\n    }\r\n\r\n    async componentWillUnmount(): Promise<void> {\r\n        const {\r\n            deinitialize,\r\n            methodId,\r\n            onUnhandledError = noop,\r\n        } = this.props;\r\n\r\n        try {\r\n            await deinitialize({ methodId });\r\n        } catch (error) {\r\n            onUnhandledError(error);\r\n        }\r\n    }\r\n\r\n    render(): ReactNode {\r\n\r\n        return (\r\n            <>\r\n                <div className=\"stepHeader\" style={ { padding: 0 } }>\r\n                    <div id=\"StripeUpeShipping\" style={ { width: '100%' } } />\r\n                </div>\r\n                <br />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default StripeShippingAddressDisplay;\r\n","interface StripeCountryMapping {\r\n    [key: string]: StripeStateMapping;\r\n}\r\n\r\ninterface StripeStateMapping {\r\n    [key: string]: string;\r\n}\r\n\r\nexport default function StripeStateMapper(country: string, state: string): string {\r\n\r\n    const countries: StripeCountryMapping = {\r\n        'MX': {\r\n            'Ags.': 'AGU',\r\n            'B.C.': 'BCN',\r\n            'B.C.S.': 'BCS',\r\n            'Camp.': 'CAM',\r\n            'Coah.': 'COA',\r\n            'Col.': 'COL',\r\n            'Chis.': 'CHP',\r\n            'Chih.': 'CHH',\r\n            'Dgo.': 'DUR',\r\n            'Gto.': 'GUA',\r\n            'Gro.': 'GRO',\r\n            'Hgo.': 'HID',\r\n            'Jal.': 'JAL',\r\n            'Méx.': 'MEX',\r\n            'CDMX': 'MEX',\r\n            'Mich.': 'MIC',\r\n            'Mor.': 'MOR',\r\n            'Nay.': 'NAY',\r\n            'N.L.': 'NLE',\r\n            'Oax.': 'OAX',\r\n            'Pue.': 'PUE',\r\n            'Qro.': 'QUE',\r\n            'Q.R.': 'ROO',\r\n            'S.L.P.': 'SLP',\r\n            'Sin.': 'SIN',\r\n            'Son.': 'SON',\r\n            'Tab.': 'TAB',\r\n            'Tamps.': 'TAM',\r\n            'Tlax.': 'TLA',\r\n            'Ver.': 'VER',\r\n            'Yuc.': 'YUC',\r\n            'Zac.': 'ZAC',\r\n        },\r\n        'AR': {\r\n            'Ciudad Autónoma de Buenos Aires': 'C',\r\n            'Buenos Aires': 'B',\r\n            'Catamarca': 'K',\r\n            'Chaco': 'H',\r\n            'Chubut': 'U',\r\n            'Córdoba': 'X',\r\n            'Corrientes': 'W',\r\n            'Entre Ríos': 'E',\r\n            'Formosa': 'P',\r\n            'Jujuy': 'Y',\r\n            'La Pampa': 'L',\r\n            'La Rioja': 'F',\r\n            'Mendoza': 'M',\r\n            'Misiones': 'N',\r\n            'Neuquén': 'Q',\r\n            'Salta': 'A',\r\n            'San Juan': 'J',\r\n            'San Luis': 'D',\r\n            'Santa Fe': 'S',\r\n            'Santiago del Estero': 'G',\r\n            'Tierra del Fuego': 'V',\r\n            'Tucumán': 'W',\r\n        },\r\n        'IN': {\r\n            'Andhra Pradesh': 'AP',\r\n            'Arunachal Pradesh': 'AR',\r\n            'Assam': 'AS',\r\n            'Bihar': 'BR',\r\n            'Chhattisgarh': 'CG',\r\n            'Goa': 'GA',\r\n            'Gujarat': 'GJ',\r\n            'Haryana': 'HR',\r\n            'Himachal Pradesh': 'HP',\r\n            'Jammu and Kashmir': 'JK',\r\n            'Jharkhand': 'JH',\r\n            'Karnataka': 'KA',\r\n            'Kerala': 'KL',\r\n            'Madhya Pradesh': 'MP',\r\n            'Maharashtra': 'MH',\r\n            'Manipur': 'MN',\r\n            'Meghalaya': 'ML',\r\n            'Mizoram': 'MZ',\r\n            'Nagaland': 'NL',\r\n            'Odisha': 'OR',\r\n            'Punjab': 'PB',\r\n            'Rajasthan': 'RJ',\r\n            'Sikkim': 'SK',\r\n            'Tamil Nadu': 'TN',\r\n            'Tripura': 'TR',\r\n            'Uttarakhand': 'UK',\r\n            'Uttar Pradesh': 'UP',\r\n            'West Bengal': 'WB',\r\n            'Andaman and Nicobar Islands': 'AN',\r\n            'Chandigarh': 'CH',\r\n            'Dadra and Nagar Haveli and Daman and Diu': 'DN',\r\n            'Lakshadweep': 'LD',\r\n            'Delhi': 'DL',\r\n            'Puducherry': 'PY',\r\n            'Telangana': 'TS',\r\n        },\r\n        'ID': {\r\n            'Bali': 'BA',\r\n            'Banten': 'BT',\r\n            'Bengkulu': 'BE',\r\n            'Aceh': 'DA',\r\n            'DKI Jakarta': 'JK',\r\n            'Sumatera Utara': 'SU',\r\n            'Sumatera Barat': 'SB',\r\n            'Riau': 'SI',\r\n            'Jambi': 'JA',\r\n            'Sumatera Selatan': 'SS',\r\n            'Lampung': 'LA',\r\n            'Jawa Barat': 'JB',\r\n            'Jawa Timur': 'JT',\r\n            'Daerah Istimewa Yogyakarta': 'DY',\r\n            'Kalimantan Barat': 'KB',\r\n            'Kalimantan Tengah': 'KT',\r\n            'Kalimantan Timur': 'KI',\r\n            'Kalimantan Selatan': 'KS',\r\n            'Nusa Tenggara Barat': 'NB',\r\n            'Nusa Tenggara Timur': 'NT',\r\n            'Sulawesi Selatan': 'SN',\r\n            'Sulawesi Tengah': 'ST',\r\n            'Sulawesi Utara': 'SA',\r\n            'Sulawesi Tenggara': 'SG',\r\n            'Maluku': 'MA',\r\n            'Maluku Utara': 'MU',\r\n            'Gorontalo': 'GO',\r\n        },\r\n        'MY': {\r\n            'Johor': 'JHR',\r\n            'Kedah': 'KDH',\r\n            'Kelantan': 'KTN',\r\n            'Melaka': 'MLK',\r\n            'Negeri Sembilan': 'NSN',\r\n            'Pahang': 'PHG',\r\n            'Pulau Pinang': 'PNG',\r\n            'Perak': 'PRK',\r\n            'Perlis': 'PLS',\r\n            'Selangor': 'SGR',\r\n            'Terengganu': 'TRG',\r\n            'Sabah': 'SBH',\r\n            'Sarawak': 'SRW',\r\n            'Kuala Lumpur': 'KUL',\r\n            'Labuan': 'LBN',\r\n            'Putrajaya': 'PJY',\r\n        },\r\n        'IE': {\r\n            'Carlow': 'CW',\r\n            'Cavan': 'CN',\r\n            'Clare': 'CE',\r\n            'Donegal': 'DL',\r\n            'Dublin': 'D',\r\n            'Galway': 'G',\r\n            'Kildare': 'KE',\r\n            'Kilkenny': 'KK',\r\n            'Laois': 'LS',\r\n            'Leitrim': 'LM',\r\n            'Longford': 'LD',\r\n            'Louth': 'LH',\r\n            'Mayo': 'MO',\r\n            'Meath': 'MH',\r\n            'Monaghan': 'MN',\r\n            'Offaly': 'OY',\r\n            'Roscommon': 'RN',\r\n            'Sligo': 'SO',\r\n            'Tipperary': 'TA',\r\n            'Waterford': 'WD',\r\n            'Westmeath': 'WH',\r\n            'Wexford': 'WX',\r\n            'Wicklow': 'WW',\r\n        },\r\n        'ES': {\r\n            'C': 'ACOR',\r\n            'VI': 'ALAV',\r\n            'AB': 'ALBA',\r\n            'A': 'ALIC',\r\n            'AL': 'ALME',\r\n            'O': 'ASTU',\r\n            'AV': 'AVIL',\r\n            'BA': 'BADA',\r\n            'PM': 'BALE',\r\n            'B': 'BARC',\r\n            'BU': 'BURG',\r\n            'CC': 'CACE',\r\n            'CA': 'CADI',\r\n            'S': 'CANT',\r\n            'CS': 'CAST',\r\n            'CE': 'CEUT',\r\n            'CR': 'CIUD',\r\n            'CO': 'CORD',\r\n            'CU': 'CUEN',\r\n            'GI': 'GIRO',\r\n            'GR': 'GRAN',\r\n            'GU': 'GUAD',\r\n            'SS': 'GUIP',\r\n            'H': 'HUEL',\r\n            'HU': 'HUES',\r\n            'J': 'JAEN',\r\n            'LO': 'LAR',\r\n            'GC': 'LAS',\r\n            'LE': 'LEON',\r\n            'L': 'LLEI',\r\n            'LU': 'LUGO',\r\n            'M': 'MADR',\r\n            'MA': 'MALA',\r\n            'ML': 'MELI',\r\n            'MU': 'MURC',\r\n            'NA': 'NAVA',\r\n            'OR': 'OURE',\r\n            'P': 'PALE',\r\n            'PO': 'PONT',\r\n            'SA': 'SALA',\r\n            'TF': 'SANT',\r\n            'SG': 'SEGO',\r\n            'SE': 'SEVI',\r\n            'SO': 'SORI',\r\n            'T': 'TARR',\r\n            'TE': 'TERU',\r\n            'TP': 'TOLE',\r\n            'V': 'VALE',\r\n            'VA': 'VALL',\r\n            'BI': 'VIZC',\r\n            'ZA': 'ZAMO',\r\n            'Z': 'ZARA',\r\n        }\r\n    };\r\n\r\n    if (countries[country]) {\r\n        return countries[country][state] ?? getStripeState(countries[country], state);\r\n    }\r\n\r\n    return state;\r\n}\r\n\r\nfunction getStripeState(stateList: StripeStateMapping, state: string) {\r\n    return Object.keys(stateList).find(key => stateList[key] === state) || state;\r\n}\r\n","import {\r\n    Address,\r\n    CheckoutSelectors,\r\n    Consignment,\r\n    Country,\r\n    ShippingInitializeOptions,\r\n    ShippingRequestOptions,\r\n    StripeShippingEvent\r\n} from '@bigcommerce/checkout-sdk';\r\nimport { memoizeOne } from '@bigcommerce/memoize';\r\nimport React, { FunctionComponent, memo, useCallback, useEffect, useState } from 'react';\r\n\r\nimport CheckoutStepStatus from '../../checkout/CheckoutStepStatus';\r\nimport { getAppliedStyles } from '../../common/dom';\r\nimport getRecommendedShippingOption from '../getRecommendedShippingOption';\r\nimport hasSelectedShippingOptions from '../hasSelectedShippingOptions';\r\nimport { SingleShippingFormValues } from '../SingleShippingForm';\r\n\r\nimport StripeShippingAddressDisplay from './StripeShippingAddressDisplay';\r\nimport StripeStateMapper from './StripeStateMapper';\r\n\r\nexport interface StripeShippingAddressProps {\r\n    consignments: Consignment[];\r\n    countries?: Country[];\r\n    shippingAddress?: Address;\r\n    step: CheckoutStepStatus;\r\n    isShippingMethodLoading: boolean;\r\n    shouldDisableSubmit: boolean;\r\n    isStripeLoading?(): void;\r\n    isStripeAutoStep?(): void;\r\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\r\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\r\n    onAddressSelect(address: Address): void;\r\n    onSubmit(values: SingleShippingFormValues): void;\r\n}\r\n\r\nconst StripeShippingAddress: FunctionComponent<StripeShippingAddressProps> = (props) => {\r\n    const {\r\n        countries,\r\n        consignments,\r\n        onAddressSelect,\r\n        initialize,\r\n        deinitialize,\r\n        shouldDisableSubmit,\r\n        onSubmit,\r\n        step,\r\n        isStripeLoading,\r\n        isStripeAutoStep,\r\n        isShippingMethodLoading,\r\n        shippingAddress,\r\n    } = props;\r\n\r\n    const [isNewAddress, setIsNewAddress] = useState(true);\r\n    const [isFirstShippingRender, setIsFirstShippingRender] = useState(true);\r\n    const [stripeShippingAddress, setStripeShippingAddress] =  useState({\r\n        firstName: '',\r\n        lastName: '',\r\n        company: '',\r\n        address1: '',\r\n        address2: '',\r\n        city: '',\r\n        stateOrProvince: '',\r\n        stateOrProvinceCode: '',\r\n        shouldSaveAddress: false,\r\n        country: '',\r\n        countryCode: '',\r\n        postalCode: '',\r\n        phone: '',\r\n        customFields: [],\r\n    });\r\n\r\n    const handleLoading = useCallback(() => {\r\n        if (isStripeLoading) {\r\n            isStripeLoading();\r\n        }\r\n    }, [isStripeLoading]);\r\n\r\n    useEffect(() => {\r\n        if (consignments[0]) {\r\n            const {availableShippingOptions} = consignments[0];\r\n\r\n            if (availableShippingOptions && !getRecommendedShippingOption(availableShippingOptions)) {\r\n                handleLoading();\r\n            }\r\n        }\r\n    }, [consignments]);\r\n\r\n    useEffect(() => {\r\n        const hasStripeAddressAndHasShippingOptions = stripeShippingAddress.firstName && hasSelectedShippingOptions(consignments);\r\n        const afterReload = !isFirstShippingRender && !isNewAddress && !isShippingMethodLoading;\r\n        const isLoadingBeforeAutoStep =  isStripeLoading && isStripeAutoStep;\r\n\r\n        if (hasStripeAddressAndHasShippingOptions && afterReload && isLoadingBeforeAutoStep) {\r\n            isStripeLoading();\r\n            isStripeAutoStep();\r\n            onSubmit({billingSameAsShipping: true, shippingAddress: stripeShippingAddress, orderComment: ''});\r\n        }\r\n    }, [isFirstShippingRender, onSubmit, stripeShippingAddress, shouldDisableSubmit, isShippingMethodLoading, isNewAddress ,consignments]);\r\n\r\n    const availableShippingList = countries?.map(country => ({code: country.code, name: country.name}));\r\n    const allowedCountries = availableShippingList ? availableShippingList.map(country => country.code).join(', ') : '';\r\n    const shouldShowContent = (isNewAddress = true, phoneFieldRequired: boolean, phone: string) => {\r\n        const stepCompleted = step.isComplete;\r\n        const shippingPopulated = shippingAddress?.firstName && isNewAddress;\r\n        const PhoneRequiredAndNotFilled = phoneFieldRequired && !phone;\r\n\r\n        return stepCompleted || shippingPopulated || PhoneRequiredAndNotFilled;\r\n    };\r\n\r\n    const handleStripeShippingAddress = useCallback(async (shipping: StripeShippingEvent) => {\r\n        const {complete, phoneFieldRequired, value: { address = { country: '', state: '', line1: '', line2: '', city: '', postal_code: '' }\r\n            , name = '', firstName = '', lastName = '', phone = '' } } = shipping;\r\n\r\n        if (complete) {\r\n            if (shouldShowContent(shipping?.isNewAddress, phoneFieldRequired, phone)) {\r\n                handleLoading();\r\n            }\r\n\r\n            const names = name?.split(' ');\r\n\r\n            // @ts-ignore\r\n            const country = availableShippingList?.find(country => country.code === address.country).name;\r\n            const state = StripeStateMapper(address.country, address.state);\r\n            const shippingValue = {\r\n                firstName: firstName || names[0],\r\n                lastName: lastName || names[1],\r\n                company: '',\r\n                address1: address.line1,\r\n                address2: address.line2 || '',\r\n                city: address.city,\r\n                stateOrProvince: state,\r\n                stateOrProvinceCode: state,\r\n                shouldSaveAddress: false,\r\n                country: country || address.country,\r\n                countryCode: address.country,\r\n                postalCode: address.postal_code,\r\n                phone: phone || '',\r\n                customFields: [],\r\n            };\r\n\r\n            if (!step.isComplete) {\r\n                setIsFirstShippingRender(current => !current);\r\n            }\r\n\r\n            onAddressSelect(shippingValue);\r\n            setStripeShippingAddress(shippingValue);\r\n\r\n            if (shipping.isNewAddress !== isNewAddress) {\r\n                setIsNewAddress(current => !current);\r\n            }\r\n        } else {\r\n            handleLoading();\r\n        }\r\n\r\n    }, [availableShippingList, onAddressSelect]);\r\n\r\n    const initializeShipping = useCallback(\r\n        memoizeOne(\r\n            (defaultOptions: ShippingInitializeOptions) => (options?: ShippingInitializeOptions) =>\r\n                initialize({\r\n                    ...defaultOptions,\r\n                    ...options,\r\n                }),\r\n        ),\r\n        [],\r\n    );\r\n\r\n    const getStylesFromElement = (\r\n        id: string,\r\n        properties: string[]) => {\r\n        const parentContainer = document.getElementById(id);\r\n\r\n        if (parentContainer) {\r\n            return getAppliedStyles(parentContainer, properties);\r\n        }\r\n\r\n        return undefined;\r\n    };\r\n\r\n    const getStripeStyles: any = useCallback( () => {\r\n        const containerId = 'stripe-card-component-field';\r\n        const formInput = getStylesFromElement(`${containerId}--input`, ['color', 'background-color', 'border-color', 'box-shadow']);\r\n        const formLabel = getStylesFromElement(`${containerId}--label`, ['color']);\r\n        const formError = getStylesFromElement(`${containerId}--error`, ['color']);\r\n\r\n        return formLabel && formInput && formError ? {\r\n            labelText: formLabel.color,\r\n            fieldText: formInput.color,\r\n            fieldPlaceholderText: formInput.color,\r\n            fieldErrorText: formError.color,\r\n            fieldBackground: formInput['background-color'],\r\n            fieldInnerShadow: formInput['box-shadow'],\r\n            fieldBorder: formInput['border-color'],\r\n        } : undefined;\r\n    }, [])\r\n\r\n        const options: ShippingInitializeOptions = {\r\n            stripeupe: {\r\n                container: 'StripeUpeShipping',\r\n                onChangeShipping: handleStripeShippingAddress,\r\n                availableCountries: allowedCountries,\r\n                getStyles: getStripeStyles,\r\n                getStripeState: StripeStateMapper,\r\n                gatewayId: 'stripeupe',\r\n                methodId: 'card',\r\n            },\r\n        };\r\n\r\n        const renderCheckoutThemeStylesForStripeUPE = () => {\r\n            const containerId = 'stripe-card-component-field';\r\n\r\n            return (\r\n                <div\r\n                    className=\"optimizedCheckout-form-input\"\r\n                    id={ `${containerId}--input` }\r\n                    placeholder=\"1111\"\r\n                >\r\n                    <div\r\n                        className=\"form-field--error\"\r\n                    >\r\n                        <div\r\n                            className=\"optimizedCheckout-form-label\"\r\n                            id={ `${containerId}--error` }\r\n                        />\r\n                    </div>\r\n                    <div\r\n                        className=\"optimizedCheckout-form-label\"\r\n                        id={ `${containerId}--label` }\r\n                    />\r\n                </div>\r\n            );\r\n        };\r\n\r\n        return (\r\n            <>\r\n                <StripeShippingAddressDisplay\r\n                    deinitialize={ deinitialize }\r\n                    initialize={ initializeShipping(options) }\r\n                    methodId=\"stripeupe\"\r\n                />\r\n                { renderCheckoutThemeStylesForStripeUPE() }\r\n            </>\r\n        );\r\n};\r\n\r\nexport default memo(StripeShippingAddress);\r\n","import {\r\n    Address,\r\n    CheckoutParams,\r\n    CheckoutSelectors,\r\n    Consignment,\r\n    Country,\r\n    FormField,\r\n    RequestOptions,\r\n    ShippingInitializeOptions,\r\n    ShippingRequestOptions,\r\n} from '@bigcommerce/checkout-sdk';\r\nimport { FormikProps, withFormik } from 'formik';\r\nimport { noop } from 'lodash';\r\nimport React, { PureComponent, ReactNode } from 'react';\r\nimport { lazy, object } from 'yup';\r\n\r\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\r\n\r\nimport {\r\n    AddressFormValues,\r\n    getAddressFormFieldsValidationSchema,\r\n    getTranslateAddressError,\r\n    mapAddressToFormValues,\r\n} from '../../address';\r\nimport CheckoutStepStatus from '../../checkout/CheckoutStepStatus';\r\nimport { getCustomFormFieldsValidationSchema } from '../../formFields';\r\nimport { Fieldset, Form, FormContext } from '../../ui/form';\r\nimport BillingSameAsShippingField from '../BillingSameAsShippingField';\r\nimport hasSelectedShippingOptions from '../hasSelectedShippingOptions';\r\nimport ShippingFormFooter from '../ShippingFormFooter';\r\n\r\nimport StripeShippingAddress from './StripeShippingAddress';\r\n\r\nexport interface SingleShippingFormProps {\r\n    isBillingSameAsShipping: boolean;\r\n    cartHasChanged: boolean;\r\n    consignments: Consignment[];\r\n    countries: Country[];\r\n    customerMessage: string;\r\n    isLoading: boolean;\r\n    isShippingMethodLoading: boolean;\r\n    isMultiShippingMode: boolean;\r\n    methodId?: string;\r\n    shippingAddress?: Address;\r\n    shouldShowOrderComments: boolean;\r\n    step: CheckoutStepStatus;\r\n    isStripeLoading?(): void;\r\n    isStripeAutoStep?(): void;\r\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\r\n    getFields(countryCode?: string): FormField[];\r\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\r\n    onSubmit(values: SingleShippingFormValues): void;\r\n    onUnhandledError?(error: Error): void;\r\n    updateAddress(\r\n        address: Partial<Address>,\r\n        options?: RequestOptions<CheckoutParams>,\r\n    ): Promise<CheckoutSelectors>;\r\n}\r\n\r\nexport interface SingleShippingFormValues {\r\n    billingSameAsShipping: boolean;\r\n    shippingAddress?: AddressFormValues;\r\n    orderComment: string;\r\n}\r\n\r\ninterface SingleShippingFormState {\r\n    isUpdatingShippingData: boolean;\r\n}\r\n\r\nclass StripeShippingForm extends PureComponent<\r\n    SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>\r\n    > {\r\n    static contextType = FormContext;\r\n\r\n    state: SingleShippingFormState = {\r\n        isUpdatingShippingData: false,\r\n    };\r\n\r\n    render(): ReactNode {\r\n        const {\r\n            cartHasChanged,\r\n            isLoading,\r\n            countries,\r\n            isStripeLoading,\r\n            shippingAddress,\r\n            consignments,\r\n            shouldShowOrderComments,\r\n            initialize,\r\n            isValid,\r\n            deinitialize,\r\n            onSubmit,\r\n            isStripeAutoStep,\r\n            step,\r\n            isShippingMethodLoading,\r\n        } = this.props;\r\n\r\n        const { isUpdatingShippingData } = this.state;\r\n\r\n        return (\r\n            <Form autoComplete=\"on\">\r\n                <Fieldset>\r\n                    <StripeShippingAddress\r\n                        consignments={consignments}\r\n                        countries={countries}\r\n                        deinitialize={deinitialize}\r\n                        initialize={initialize}\r\n                        isShippingMethodLoading={isShippingMethodLoading}\r\n                        isStripeAutoStep={isStripeAutoStep}\r\n                        isStripeLoading={isStripeLoading}\r\n                        onAddressSelect={this.handleAddressSelect}\r\n                        onSubmit={onSubmit}\r\n                        shippingAddress={shippingAddress}\r\n                        shouldDisableSubmit={this.shouldDisableSubmit()}\r\n                        step={step}\r\n                    />\r\n                    <div className=\"form-body\">\r\n                        <BillingSameAsShippingField />\r\n                    </div>\r\n                </Fieldset>\r\n\r\n                <ShippingFormFooter\r\n                    cartHasChanged={cartHasChanged}\r\n                    isLoading={isLoading || isUpdatingShippingData}\r\n                    isMultiShippingMode={false}\r\n                    shouldDisableSubmit={this.shouldDisableSubmit()}\r\n                    shouldShowOrderComments={shouldShowOrderComments}\r\n                    shouldShowShippingOptions={isValid}\r\n                />\r\n            </Form>\r\n        );\r\n    }\r\n\r\n    private shouldDisableSubmit: () => boolean = () => {\r\n        const { isLoading, consignments, isValid } = this.props;\r\n\r\n        const { isUpdatingShippingData } = this.state;\r\n\r\n        if (!isValid) {\r\n            return false;\r\n        }\r\n\r\n        return isLoading || isUpdatingShippingData || !hasSelectedShippingOptions(consignments);\r\n    };\r\n\r\n    private handleAddressSelect: (address: Address) => void = async (address) => {\r\n        const { updateAddress, onUnhandledError = noop, values, setValues } = this.props;\r\n\r\n        try {\r\n            await updateAddress(address);\r\n\r\n            setValues({\r\n                ...values,\r\n                shippingAddress: mapAddressToFormValues(\r\n                    this.getFields(address.countryCode),\r\n                    address,\r\n                ),\r\n            });\r\n        } catch (error) {\r\n            onUnhandledError(error);\r\n        }\r\n    };\r\n\r\n    private getFields(countryCode: string | undefined): FormField[] {\r\n        const { getFields } = this.props;\r\n\r\n        return getFields(countryCode);\r\n    }\r\n}\r\n\r\nexport default withLanguage(\r\n    withFormik<SingleShippingFormProps & WithLanguageProps, SingleShippingFormValues>({\r\n        handleSubmit: (values, { props: { onSubmit } }) => {\r\n            onSubmit(values);\r\n        },\r\n        mapPropsToValues: ({\r\n                               getFields,\r\n                               shippingAddress,\r\n                               isBillingSameAsShipping,\r\n                               customerMessage,\r\n                           }) => ({\r\n            billingSameAsShipping: isBillingSameAsShipping,\r\n            orderComment: customerMessage,\r\n            shippingAddress: mapAddressToFormValues(\r\n                getFields(shippingAddress && shippingAddress.countryCode),\r\n                shippingAddress,\r\n            ),\r\n        }),\r\n        isInitialValid: ({ shippingAddress, getFields, language }) =>\r\n            !!shippingAddress &&\r\n            getAddressFormFieldsValidationSchema({\r\n                language,\r\n                formFields: getFields(shippingAddress.countryCode),\r\n            }).isValidSync(shippingAddress),\r\n        validationSchema: ({\r\n                               language,\r\n                               getFields,\r\n                               methodId,\r\n                           }: SingleShippingFormProps & WithLanguageProps) =>\r\n            methodId\r\n                ? object({\r\n                    shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\r\n                        getCustomFormFieldsValidationSchema({\r\n                            translate: getTranslateAddressError(language),\r\n                            formFields: getFields(formValues && formValues.countryCode),\r\n                        }),\r\n                    ),\r\n                })\r\n                : object({\r\n                    shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\r\n                        getAddressFormFieldsValidationSchema({\r\n                            language,\r\n                            formFields: getFields(formValues && formValues.countryCode),\r\n                        }),\r\n                    ),\r\n                }),\r\n        enableReinitialize: false,\r\n    })(StripeShippingForm),\r\n);\r\n","import { Address, CheckoutSelectors, Consignment, Country, Customer, FormField, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\r\nimport React, { Component, ReactNode } from 'react';\r\n\r\nimport { AddressFormSkeleton } from '@bigcommerce/checkout/ui';\r\n\r\nimport CheckoutStepStatus from '../../checkout/CheckoutStepStatus';\r\nimport ShippingHeader from '../ShippingHeader';\r\n\r\nimport StripeShippingForm, { SingleShippingFormValues } from './StripeShippingForm';\r\n\r\nexport interface StripeShippingProps {\r\n    isBillingSameAsShipping: boolean;\r\n    cartHasChanged: boolean;\r\n    isMultiShippingMode: boolean;\r\n    step: CheckoutStepStatus;\r\n    consignments: Consignment[];\r\n    countries: Country[];\r\n    customer: Customer;\r\n    customerMessage: string;\r\n    isGuest: boolean;\r\n    isInitializing: boolean;\r\n    isLoading: boolean;\r\n    isShippingMethodLoading: boolean;\r\n    isShippingStepPending: boolean;\r\n    methodId?: string;\r\n    shippingAddress?: Address;\r\n    shouldShowAddAddressInCheckout: boolean;\r\n    shouldShowMultiShipping: boolean;\r\n    shouldShowOrderComments: boolean;\r\n    onReady?(): void;\r\n    onUnhandledError(error: Error): void;\r\n    onSubmit(values: SingleShippingFormValues): void;\r\n    onMultiShippingChange(): void;\r\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\r\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\r\n    loadShippingAddressFields(): Promise<CheckoutSelectors>;\r\n    loadShippingOptions(): Promise<CheckoutSelectors>;\r\n    updateAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\r\n    getFields(countryCode?: string): FormField[];\r\n}\r\n\r\ninterface StripeShippingState {\r\n    isStripeLoading: boolean;\r\n    isStripeAutoStep: boolean;\r\n}\r\n\r\nclass StripeShipping extends Component<StripeShippingProps, StripeShippingState> {\r\n    constructor(props: StripeShippingProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isStripeLoading: true,\r\n            isStripeAutoStep: false,\r\n        };\r\n    }\r\n\r\n    render(): ReactNode {\r\n        const {\r\n            isBillingSameAsShipping,\r\n            isGuest,\r\n            shouldShowMultiShipping,\r\n            customer,\r\n            updateAddress,\r\n            initialize,\r\n            deinitialize,\r\n            isMultiShippingMode,\r\n            step,\r\n            onSubmit,\r\n            onMultiShippingChange,\r\n            isLoading,\r\n            isShippingMethodLoading,\r\n            ...shippingFormProps\r\n        } = this.props;\r\n\r\n        const {\r\n            isStripeLoading,\r\n            isStripeAutoStep,\r\n        } = this.state;\r\n\r\n        return <>\r\n            <AddressFormSkeleton isLoading={isStripeAutoStep || isStripeLoading}/>\r\n            <div className=\"checkout-form\" style={{display: isStripeAutoStep || isStripeLoading ? 'none' : undefined}}>\r\n                <ShippingHeader\r\n                    isGuest={isGuest}\r\n                    isMultiShippingMode={isMultiShippingMode}\r\n                    onMultiShippingChange={onMultiShippingChange}\r\n                    shouldShowMultiShipping={shouldShowMultiShipping}\r\n                />\r\n                <StripeShippingForm\r\n                    {...shippingFormProps}\r\n                    deinitialize={deinitialize}\r\n                    initialize={initialize}\r\n                    isBillingSameAsShipping={isBillingSameAsShipping}\r\n                    isLoading={isLoading}\r\n                    isMultiShippingMode={isMultiShippingMode}\r\n                    isShippingMethodLoading={isShippingMethodLoading}\r\n                    isStripeAutoStep={this.handleIsAutoStep}\r\n                    isStripeLoading={this.stripeLoadedCallback}\r\n                    onSubmit={onSubmit}\r\n                    step={step}\r\n                    updateAddress={updateAddress}\r\n                />\r\n            </div>\r\n        </>;\r\n    }\r\n\r\n    private stripeLoadedCallback: () => void = () => {\r\n        this.setState({ isStripeLoading: false });\r\n    }\r\n\r\n    private handleIsAutoStep: () => void = () => {\r\n        this.setState({ isStripeAutoStep: true });\r\n    }\r\n}\r\n\r\nexport default StripeShipping;\r\n","/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport {\r\n    Address,\r\n    AddressRequestBody,\r\n    Cart,\r\n    CheckoutRequestBody,\r\n    CheckoutSelectors,\r\n    Consignment,\r\n    ConsignmentAssignmentRequestBody,\r\n    Country,\r\n    Customer,\r\n    CustomerRequestOptions,\r\n    FormField,\r\n    ShippingInitializeOptions,\r\n    ShippingRequestOptions,\r\n} from '@bigcommerce/checkout-sdk';\r\nimport { noop } from 'lodash';\r\nimport React, { Component, ReactNode } from 'react';\r\nimport { createSelector } from 'reselect';\r\n\r\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\r\nimport { AddressFormSkeleton } from '@bigcommerce/checkout/ui';\r\n\r\nimport { isEqualAddress, mapAddressFromFormValues } from '../address';\r\nimport { withCheckout } from '../checkout';\r\nimport CheckoutStepStatus from '../checkout/CheckoutStepStatus';\r\nimport { EMPTY_ARRAY, isFloatingLabelEnabled } from '../common/utility';\r\nimport { PaymentMethodId } from '../payment/paymentMethod';\r\n\r\nimport { UnassignItemError } from './errors';\r\nimport getShippableItemsCount from './getShippableItemsCount';\r\nimport getShippingMethodId from './getShippingMethodId';\r\nimport { MultiShippingFormValues } from './MultiShippingForm';\r\nimport ShippingForm from './ShippingForm';\r\nimport ShippingHeader from './ShippingHeader';\r\nimport { SingleShippingFormValues } from './SingleShippingForm';\r\nimport StripeShipping from './stripeUPE/StripeShipping';\r\n\r\nexport interface ShippingProps {\r\n    isBillingSameAsShipping: boolean;\r\n    cartHasChanged: boolean;\r\n    isMultiShippingMode: boolean;\r\n    step: CheckoutStepStatus;\r\n    onCreateAccount(): void;\r\n    onToggleMultiShipping(): void;\r\n    onReady?(): void;\r\n    onUnhandledError(error: Error): void;\r\n    onSignIn(): void;\r\n    navigateNextStep(isBillingSameAsShipping: boolean): void;\r\n}\r\n\r\nexport interface WithCheckoutShippingProps {\r\n    billingAddress?: Address;\r\n    cart: Cart;\r\n    consignments: Consignment[];\r\n    countries: Country[];\r\n    countriesWithAutocomplete: string[];\r\n    customer: Customer;\r\n    customerMessage: string;\r\n    googleMapsApiKey: string;\r\n    isGuest: boolean;\r\n    isInitializing: boolean;\r\n    isLoading: boolean;\r\n    isShippingStepPending: boolean;\r\n    methodId?: string;\r\n    shippingAddress?: Address;\r\n    shouldShowAddAddressInCheckout: boolean;\r\n    shouldShowMultiShipping: boolean;\r\n    shouldShowOrderComments: boolean;\r\n    providerWithCustomCheckout?: string;\r\n    isFloatingLabelEnabled?: boolean;\r\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\r\n    deinitializeShippingMethod(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\r\n    deleteConsignments(): Promise<Address | undefined>;\r\n    getFields(countryCode?: string): FormField[];\r\n    initializeShippingMethod(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\r\n    loadShippingAddressFields(): Promise<CheckoutSelectors>;\r\n    loadShippingOptions(): Promise<CheckoutSelectors>;\r\n    signOut(options?: CustomerRequestOptions): void;\r\n    createCustomerAddress(address: AddressRequestBody): Promise<CheckoutSelectors>;\r\n    unassignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\r\n    updateBillingAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\r\n    updateCheckout(payload: CheckoutRequestBody): Promise<CheckoutSelectors>;\r\n    updateShippingAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\r\n}\r\n\r\ninterface ShippingState {\r\n    isInitializing: boolean;\r\n}\r\n\r\nclass Shipping extends Component<ShippingProps & WithCheckoutShippingProps, ShippingState> {\r\n    constructor(props: ShippingProps & WithCheckoutShippingProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isInitializing: true,\r\n        };\r\n    }\r\n\r\n    async componentDidMount(): Promise<void> {\r\n        const {\r\n            loadShippingAddressFields,\r\n            loadShippingOptions,\r\n            onReady = noop,\r\n            onUnhandledError = noop,\r\n        } = this.props;\r\n\r\n        try {\r\n            await Promise.all([loadShippingAddressFields(), loadShippingOptions()]);\r\n\r\n            onReady();\r\n        } catch (error) {\r\n            onUnhandledError(error);\r\n        } finally {\r\n            this.setState({ isInitializing: false });\r\n        }\r\n    }\r\n\r\n    render(): ReactNode {\r\n        const {\r\n            isBillingSameAsShipping,\r\n            isGuest,\r\n            shouldShowMultiShipping,\r\n            customer,\r\n            unassignItem,\r\n            updateShippingAddress,\r\n            initializeShippingMethod,\r\n            deinitializeShippingMethod,\r\n            isMultiShippingMode,\r\n            onToggleMultiShipping,\r\n            providerWithCustomCheckout,\r\n            step,\r\n            isFloatingLabelEnabled,\r\n            ...shippingFormProps\r\n        } = this.props;\r\n\r\n        const {\r\n            isInitializing,\r\n        } = this.state;\r\n\r\n        if (providerWithCustomCheckout === PaymentMethodId.StripeUPE && !customer.email && this.props.countries.length > 0) {\r\n            return <StripeShipping\r\n                { ...shippingFormProps }\r\n                customer={ customer }\r\n                deinitialize={deinitializeShippingMethod}\r\n                initialize={initializeShippingMethod}\r\n                isBillingSameAsShipping={isBillingSameAsShipping}\r\n                isGuest={ isGuest }\r\n                isLoading={ isInitializing }\r\n                isMultiShippingMode={isMultiShippingMode}\r\n                isShippingMethodLoading={ this.props.isLoading }\r\n                onMultiShippingChange={ this.handleMultiShippingModeSwitch }\r\n                onSubmit={this.handleSingleShippingSubmit}\r\n                shouldShowMultiShipping={ shouldShowMultiShipping }\r\n                step={step}\r\n                updateAddress={updateShippingAddress}\r\n            />;\r\n        }\r\n\r\n        return (\r\n            <AddressFormSkeleton isLoading={isInitializing}>\r\n                <div className=\"checkout-form\">\r\n                    <ShippingHeader\r\n                        isGuest={isGuest}\r\n                        isMultiShippingMode={isMultiShippingMode}\r\n                        onMultiShippingChange={this.handleMultiShippingModeSwitch}\r\n                        shouldShowMultiShipping={shouldShowMultiShipping}\r\n                    />\r\n                    <ShippingForm\r\n                        {...shippingFormProps}\r\n                        addresses={customer.addresses}\r\n                        deinitialize={deinitializeShippingMethod}\r\n                        initialize={initializeShippingMethod}\r\n                        isBillingSameAsShipping={isBillingSameAsShipping}\r\n                        isFloatingLabelEnabled={isFloatingLabelEnabled}\r\n                        isGuest={isGuest}\r\n                        isMultiShippingMode={isMultiShippingMode}\r\n                        onMultiShippingSubmit={this.handleMultiShippingSubmit}\r\n                        onSingleShippingSubmit={this.handleSingleShippingSubmit}\r\n                        onUseNewAddress={this.handleUseNewAddress}\r\n                        shouldShowSaveAddress={!isGuest}\r\n                        updateAddress={updateShippingAddress}\r\n                    />\r\n                </div>\r\n            </AddressFormSkeleton>\r\n        );\r\n    }\r\n\r\n    private handleMultiShippingModeSwitch: () => void = async () => {\r\n        const {\r\n            consignments,\r\n            isMultiShippingMode,\r\n            onToggleMultiShipping = noop,\r\n            onUnhandledError = noop,\r\n            updateShippingAddress,\r\n        } = this.props;\r\n\r\n        if (isMultiShippingMode && consignments.length > 1) {\r\n            this.setState({ isInitializing: true });\r\n\r\n            try {\r\n                // Collapse all consignments into one\r\n                await updateShippingAddress(consignments[0].shippingAddress);\r\n            } catch (error) {\r\n                onUnhandledError(error);\r\n            } finally {\r\n                this.setState({ isInitializing: false });\r\n            }\r\n        }\r\n\r\n        onToggleMultiShipping();\r\n    };\r\n\r\n    private handleSingleShippingSubmit: (values: SingleShippingFormValues) => void = async ({\r\n        billingSameAsShipping,\r\n        shippingAddress: addressValues,\r\n        orderComment,\r\n    }) => {\r\n        const {\r\n            customerMessage,\r\n            updateCheckout,\r\n            updateBillingAddress,\r\n            navigateNextStep,\r\n            onUnhandledError,\r\n            shippingAddress,\r\n            billingAddress,\r\n            methodId,\r\n        } = this.props;\r\n\r\n        const updatedShippingAddress = addressValues && mapAddressFromFormValues(addressValues);\r\n        const promises: Array<Promise<CheckoutSelectors>> = [];\r\n        const hasRemoteBilling = this.hasRemoteBilling(methodId);\r\n\r\n        if (!isEqualAddress(updatedShippingAddress, shippingAddress) || shippingAddress?.shouldSaveAddress !== updatedShippingAddress?.shouldSaveAddress) {\r\n            // promises.push(updateShippingAddress(updatedShippingAddress || {}));\r\n        }\r\n\r\n        if (\r\n            billingSameAsShipping &&\r\n            updatedShippingAddress &&\r\n            !isEqualAddress(updatedShippingAddress, billingAddress) &&\r\n            !hasRemoteBilling\r\n        ) {\r\n            promises.push(updateBillingAddress(updatedShippingAddress));\r\n        }\r\n\r\n        if (customerMessage !== orderComment) {\r\n            promises.push(updateCheckout({ customerMessage: orderComment }));\r\n        }\r\n\r\n        try {\r\n            await Promise.all(promises);\r\n\r\n            navigateNextStep(billingSameAsShipping);\r\n        } catch (error) {\r\n            if (error instanceof Error) {\r\n                onUnhandledError(error);\r\n            }\r\n        }\r\n    };\r\n\r\n    private hasRemoteBilling: (methodId?: string) => boolean = (methodId) => {\r\n        const PAYMENT_METHOD_VALID = ['amazonpay'];\r\n\r\n        return PAYMENT_METHOD_VALID.some((method) => method === methodId);\r\n    };\r\n\r\n    private handleUseNewAddress: (address: Address, itemId: string) => void = async (\r\n        address,\r\n        itemId,\r\n    ) => {\r\n        const { unassignItem, onUnhandledError } = this.props;\r\n\r\n        try {\r\n            await unassignItem({\r\n                address,\r\n                lineItems: [\r\n                    {\r\n                        quantity: 1,\r\n                        itemId,\r\n                    },\r\n                ],\r\n            });\r\n\r\n            location.href = '/account.php?action=add_shipping_address&from=checkout';\r\n        } catch (error) {\r\n            if (error instanceof UnassignItemError) {\r\n                onUnhandledError(new UnassignItemError(error));\r\n            }\r\n        }\r\n    };\r\n\r\n    private handleMultiShippingSubmit: (values: MultiShippingFormValues) => void = async ({\r\n        orderComment,\r\n    }) => {\r\n        const { customerMessage, updateCheckout, navigateNextStep, onUnhandledError } = this.props;\r\n\r\n        try {\r\n            if (customerMessage !== orderComment) {\r\n                await updateCheckout({ customerMessage: orderComment });\r\n            }\r\n\r\n            navigateNextStep(false);\r\n        } catch (error) {\r\n            if (error instanceof Error) {\r\n                onUnhandledError(error);\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\nconst deleteConsignmentsSelector = createSelector(\r\n    ({ checkoutService: { deleteConsignment } }: CheckoutContextProps) => deleteConsignment,\r\n    ({ checkoutState: { data } }: CheckoutContextProps) => data.getConsignments(),\r\n    (deleteConsignment, consignments) => async () => {\r\n        if (!consignments || !consignments.length) {\r\n            return;\r\n        }\r\n\r\n        const [{ data }] = await Promise.all(consignments.map(({ id }) => deleteConsignment(id)));\r\n\r\n        return data.getShippingAddress();\r\n    },\r\n);\r\n\r\n// tslint:disable-next-line:cyclomatic-complexity\r\nexport function mapToShippingProps({\r\n    checkoutService,\r\n    checkoutState,\r\n}: CheckoutContextProps): WithCheckoutShippingProps | null {\r\n    const {\r\n        data: {\r\n            getCart,\r\n            getCheckout,\r\n            getConfig,\r\n            getCustomer,\r\n            getConsignments,\r\n            getShippingAddress,\r\n            getBillingAddress,\r\n            getShippingAddressFields,\r\n            getShippingCountries,\r\n        },\r\n        statuses: {\r\n            isShippingStepPending,\r\n            isSelectingShippingOption,\r\n            isLoadingShippingOptions,\r\n            isUpdatingConsignment,\r\n            isCreatingConsignments,\r\n            isCreatingCustomerAddress,\r\n            isLoadingShippingCountries,\r\n            isUpdatingBillingAddress,\r\n            isUpdatingCheckout,\r\n        },\r\n    } = checkoutState;\r\n\r\n    const checkout = getCheckout();\r\n    const config = getConfig();\r\n    const consignments = getConsignments() || [];\r\n    const customer = getCustomer();\r\n    const cart = getCart();\r\n\r\n    if (!checkout || !config || !customer || !cart) {\r\n        return null;\r\n    }\r\n\r\n    const {\r\n        checkoutSettings: {\r\n            enableOrderComments,\r\n            features,\r\n            hasMultiShippingEnabled,\r\n            googleMapsApiKey,\r\n        },\r\n    } = config;\r\n\r\n    const methodId = getShippingMethodId(checkout);\r\n    const shippableItemsCount = getShippableItemsCount(cart);\r\n    const isLoading =\r\n        isLoadingShippingOptions() ||\r\n        isSelectingShippingOption() ||\r\n        isUpdatingConsignment() ||\r\n        isCreatingConsignments() ||\r\n        isUpdatingBillingAddress() ||\r\n        isUpdatingCheckout() ||\r\n        isCreatingCustomerAddress();\r\n    const shouldShowMultiShipping =\r\n        hasMultiShippingEnabled && !methodId && shippableItemsCount > 1 && shippableItemsCount < 50;\r\n    const countriesWithAutocomplete = ['US', 'CA', 'AU', 'NZ'];\r\n\r\n    if (features['CHECKOUT-4183.checkout_google_address_autocomplete_uk']) {\r\n        countriesWithAutocomplete.push('GB');\r\n    }\r\n\r\n    const shippingAddress =\r\n        !shouldShowMultiShipping && consignments.length > 1 ? undefined : getShippingAddress();\r\n\r\n    return {\r\n        assignItem: checkoutService.assignItemsToAddress,\r\n        billingAddress: getBillingAddress(),\r\n        cart,\r\n        consignments,\r\n        countries: getShippingCountries() || EMPTY_ARRAY,\r\n        countriesWithAutocomplete,\r\n        customer,\r\n        customerMessage: checkout.customerMessage,\r\n        createCustomerAddress: checkoutService.createCustomerAddress,\r\n        deinitializeShippingMethod: checkoutService.deinitializeShipping,\r\n        deleteConsignments: deleteConsignmentsSelector({ checkoutService, checkoutState }),\r\n        getFields: getShippingAddressFields,\r\n        googleMapsApiKey,\r\n        initializeShippingMethod: checkoutService.initializeShipping,\r\n        isGuest: customer.isGuest,\r\n        isInitializing: isLoadingShippingCountries() || isLoadingShippingOptions(),\r\n        isLoading,\r\n        isShippingStepPending: isShippingStepPending(),\r\n        loadShippingAddressFields: checkoutService.loadShippingAddressFields,\r\n        loadShippingOptions: checkoutService.loadShippingOptions,\r\n        methodId,\r\n        providerWithCustomCheckout: config.checkoutSettings.providerWithCustomCheckout || undefined,\r\n        shippingAddress,\r\n        shouldShowMultiShipping,\r\n        shouldShowAddAddressInCheckout:\r\n            features['CHECKOUT-4726.add_address_in_multishipping_checkout'],\r\n        shouldShowOrderComments: enableOrderComments,\r\n        signOut: checkoutService.signOutCustomer,\r\n        unassignItem: checkoutService.unassignItemsToAddress,\r\n        updateBillingAddress: checkoutService.updateBillingAddress,\r\n        updateCheckout: checkoutService.updateCheckout,\r\n        updateShippingAddress: checkoutService.updateShippingAddress,\r\n        isFloatingLabelEnabled: isFloatingLabelEnabled(config.checkoutSettings),\r\n    };\r\n}\r\n\r\nexport default withCheckout(mapToShippingProps)(Shipping);\r\n","import { noop } from 'lodash';\r\nimport { createContext } from 'react';\r\n\r\nexport interface AccordionContextProps {\r\n    selectedItemId?: string;\r\n    onToggle(id: string): void;\r\n}\r\n\r\nconst AccordionContext = createContext<AccordionContextProps>({ onToggle: noop });\r\n\r\nexport default AccordionContext;\r\n","import { FieldProps } from 'formik';\r\nimport { kebabCase } from 'lodash';\r\nimport React, { FunctionComponent, memo, ReactNode, useCallback } from 'react';\r\n\r\nimport BasicFormField from './BasicFormField';\r\nimport CheckboxInput from './CheckboxInput';\r\nimport FormFieldError from './FormFieldError';\r\n\r\nexport interface CheckboxFormFieldProps {\r\n    additionalClassName?: string;\r\n    disabled?: boolean;\r\n    name: string;\r\n    id?: string;\r\n    labelContent: ReactNode;\r\n    onChange?(isChecked: boolean): void;\r\n}\r\n\r\nconst CheckboxFormField: FunctionComponent<CheckboxFormFieldProps> = ({\r\n    additionalClassName,\r\n    disabled = false,\r\n    labelContent,\r\n    onChange,\r\n    name,\r\n    id,\r\n}) => {\r\n    const renderField = useCallback(\r\n        ({ field }: FieldProps) => (\r\n            <>\r\n                <CheckboxInput\r\n                    {...field}\r\n                    checked={!!field.value}\r\n                    disabled={disabled}\r\n                    id={id || field.name}\r\n                    label={labelContent}\r\n                />\r\n\r\n                <FormFieldError\r\n                    errorId={`${id ?? name}-field-error-message`}\r\n                    name={name}\r\n                    testId={`${kebabCase(name)}-field-error-message`}\r\n                />\r\n            </>\r\n        ),\r\n        [disabled, id, labelContent, name],\r\n    );\r\n\r\n    return (\r\n        <BasicFormField\r\n            additionalClassName={additionalClassName}\r\n            name={name}\r\n            onChange={onChange}\r\n            render={renderField}\r\n        />\r\n    );\r\n};\r\n\r\nexport default memo(CheckboxFormField);\r\n","import { memoizeOne } from '@bigcommerce/memoize';\r\nimport { noop } from 'lodash';\r\nimport React, { Component, ReactNode } from 'react';\r\n\r\nimport AccordionContext from './AccordionContext';\r\n\r\nexport interface AccordionProps {\r\n    children: ReactNode;\r\n    className?: string;\r\n    defaultSelectedItemId?: string;\r\n    isDisabled?: boolean;\r\n    onSelect?(id: string): void;\r\n}\r\n\r\nexport interface AccordionState {\r\n    selectedItemId?: string;\r\n}\r\n\r\nexport default class Accordion extends Component<AccordionProps, AccordionState> {\r\n    state: AccordionState = {};\r\n\r\n    private getContextValue = memoizeOne((selectedItemId) => {\r\n        return {\r\n            onToggle: this.handleToggleItem,\r\n            selectedItemId,\r\n        };\r\n    });\r\n\r\n    render(): ReactNode {\r\n        const { children, className = 'accordion', defaultSelectedItemId } = this.props;\r\n\r\n        const { selectedItemId = defaultSelectedItemId } = this.state;\r\n\r\n        return (\r\n            <AccordionContext.Provider value={this.getContextValue(selectedItemId)}>\r\n                <ul className={className}>{children}</ul>\r\n            </AccordionContext.Provider>\r\n        );\r\n    }\r\n\r\n    private handleToggleItem: (id: string) => void = (id) => {\r\n        const { isDisabled, onSelect = noop } = this.props;\r\n\r\n        if (isDisabled) {\r\n            return;\r\n        }\r\n\r\n        this.setState({ selectedItemId: id });\r\n        onSelect(id);\r\n    };\r\n}\r\n","import { noop } from 'lodash';\r\nimport React, {\r\n    createContext,\r\n    FunctionComponent,\r\n    memo,\r\n    ReactNode,\r\n    useCallback,\r\n    useMemo,\r\n} from 'react';\r\n\r\nimport { connectFormik, ConnectFormikProps } from '../../common/form';\r\nimport { Accordion } from '../accordion';\r\n\r\nexport interface ChecklistProps {\r\n    children: ReactNode;\r\n    defaultSelectedItemId?: string;\r\n    isDisabled?: boolean;\r\n    name: string;\r\n    onSelect?(value: string): void;\r\n}\r\n\r\nexport interface ChecklistContextProps {\r\n    name: string;\r\n}\r\n\r\nexport const ChecklistContext = createContext<ChecklistContextProps | undefined>(undefined);\r\n\r\nconst Checklist: FunctionComponent<\r\n    ChecklistProps & ConnectFormikProps<{ [key: string]: string }>\r\n> = ({ formik: { setFieldValue }, name, onSelect = noop, ...props }) => {\r\n    const handleSelect = useCallback(\r\n        (value: string) => {\r\n            setFieldValue(name, value);\r\n            onSelect(value);\r\n        },\r\n        [name, onSelect, setFieldValue],\r\n    );\r\n\r\n    const contextValue = useMemo(() => ({ name }), [name]);\r\n\r\n    return (\r\n        <ChecklistContext.Provider value={contextValue}>\r\n            <Accordion\r\n                {...props}\r\n                className=\"form-checklist optimizedCheckout-form-checklist\"\r\n                onSelect={handleSelect}\r\n            />\r\n        </ChecklistContext.Provider>\r\n    );\r\n};\r\n\r\nexport default connectFormik(memo(Checklist));\r\n","import classNames from 'classnames';\r\nimport React, { FunctionComponent, memo, ReactNode, useCallback, useContext } from 'react';\r\nimport { CSSTransition } from 'react-transition-group';\r\n\r\nimport AccordionContext from './AccordionContext';\r\n\r\nexport interface AccordionItemProps {\r\n    bodyClassName?: string;\r\n    children?: ReactNode;\r\n    className?: string;\r\n    classNameSelected?: string;\r\n    headerClassName?: string;\r\n    headerClassNameSelected?: string;\r\n    itemId: string;\r\n    headerContent(props: AccordionItemHeaderProps): ReactNode;\r\n}\r\n\r\nexport interface AccordionItemHeaderProps {\r\n    isSelected: boolean;\r\n    onToggle(id: string): void;\r\n}\r\n\r\nconst AccordionItem: FunctionComponent<AccordionItemProps> = ({\r\n    bodyClassName = 'accordion-item-body',\r\n    children,\r\n    className = 'accordion-item',\r\n    classNameSelected = 'accordion-item--selected',\r\n    headerClassName = 'accordion-item-header',\r\n    headerClassNameSelected = 'accordion-item-header--selected',\r\n    headerContent,\r\n    itemId,\r\n}) => {\r\n    const { onToggle, selectedItemId } = useContext(AccordionContext);\r\n    const isSelected = selectedItemId === itemId;\r\n\r\n    const transitionEndListener = useCallback((node, done) => {\r\n        node.addEventListener('transitionend', ({ target }: Event) => {\r\n            if (target === node) {\r\n                done();\r\n            }\r\n        });\r\n    }, []);\r\n\r\n    return (\r\n        <li\r\n            className={classNames(className, { [classNameSelected]: isSelected })}\r\n        >\r\n            <div className={classNames(headerClassName, { [headerClassNameSelected]: isSelected })}>\r\n                {headerContent({ isSelected, onToggle })}\r\n            </div>\r\n\r\n            {children && (\r\n                <CSSTransition\r\n                    addEndListener={transitionEndListener}\r\n                    classNames={bodyClassName}\r\n                    in={isSelected}\r\n                    mountOnEnter\r\n                    timeout={{}}\r\n                    unmountOnExit\r\n                >\r\n                    <div className={bodyClassName}>{children}</div>\r\n                </CSSTransition>\r\n            )}\r\n        </li>\r\n    );\r\n};\r\n\r\nexport default memo(AccordionItem);\r\n","import React, { FunctionComponent, InputHTMLAttributes } from 'react';\r\n\r\nimport Input from './Input';\r\nimport Label from './Label';\r\n\r\nexport interface ChecklistItemInputProps extends InputHTMLAttributes<HTMLInputElement> {\r\n    isSelected: boolean;\r\n}\r\n\r\nconst ChecklistItemInput: FunctionComponent<ChecklistItemInputProps> = ({\r\n    id,\r\n    isSelected,\r\n    children,\r\n    ...props\r\n}) => (\r\n    <>\r\n        <Input\r\n            {...props}\r\n            checked={isSelected}\r\n            className=\"form-checklist-checkbox optimizedCheckout-form-checklist-checkbox\"\r\n            id={id}\r\n            type=\"radio\"\r\n        />\r\n\r\n        <Label htmlFor={id}>{children}</Label>\r\n    </>\r\n);\r\n\r\nexport default ChecklistItemInput;\r\n","import { memoizeOne } from '@bigcommerce/memoize';\r\nimport { FieldProps } from 'formik';\r\nimport { kebabCase } from 'lodash';\r\nimport React, { FunctionComponent, memo, ReactNode, useCallback, useContext } from 'react';\r\n\r\nimport { AccordionItem, AccordionItemHeaderProps } from '../accordion';\r\n\r\nimport BasicFormField from './BasicFormField';\r\nimport { ChecklistContext } from './Checklist';\r\nimport ChecklistItemInput from './ChecklistItemInput';\r\n\r\nexport interface ChecklistItemProps {\r\n    content?: ReactNode;\r\n    htmlId?: string;\r\n    isDisabled?: boolean;\r\n    label: ReactNode | ((isSelected: boolean) => ReactNode);\r\n    value: string;\r\n}\r\n\r\nconst ChecklistItem: FunctionComponent<ChecklistItemProps> = ({\r\n    isDisabled,\r\n    value,\r\n    content,\r\n    htmlId = kebabCase(value),\r\n    label,\r\n    ...rest\r\n}) => {\r\n    const { name = '' } = useContext(ChecklistContext) || {};\r\n\r\n    const renderInput = useCallback(\r\n        memoizeOne((isSelected: boolean) => ({ field }: FieldProps) => (\r\n            <ChecklistItemInput\r\n                {...field}\r\n                disabled={isDisabled}\r\n                id={htmlId}\r\n                isSelected={field.value === value}\r\n                value={value}\r\n            >\r\n                {label instanceof Function ? label(isSelected) : label}\r\n            </ChecklistItemInput>\r\n        )),\r\n        [htmlId, isDisabled, label, value],\r\n    );\r\n\r\n    const handleChange = useCallback(\r\n        memoizeOne((onToggle: (id: string) => void) => (selectedValue: string) => {\r\n            if (value === selectedValue) {\r\n                onToggle(value);\r\n            }\r\n        }),\r\n        [],\r\n    );\r\n\r\n    const renderHeaderContent = useCallback(\r\n        ({ isSelected, onToggle }: AccordionItemHeaderProps) => (\r\n            <BasicFormField\r\n                className=\"form-checklist-option\"\r\n                name={name}\r\n                onChange={handleChange(onToggle)}\r\n                render={renderInput(isSelected)}\r\n            />\r\n        ),\r\n        [handleChange, name, renderInput],\r\n    );\r\n\r\n    return (\r\n        <AccordionItem\r\n            {...rest}\r\n            bodyClassName=\"form-checklist-body\"\r\n            className=\"form-checklist-item optimizedCheckout-form-checklist-item\"\r\n            classNameSelected=\"form-checklist-item--selected optimizedCheckout-form-checklist-item--selected\"\r\n            headerClassName=\"form-checklist-header\"\r\n            headerClassNameSelected=\"form-checklist-header--selected\"\r\n            headerContent={renderHeaderContent}\r\n            itemId={value}\r\n        >\r\n            {content}\r\n        </AccordionItem>\r\n    );\r\n};\r\n\r\nexport default memo(ChecklistItem);\r\n"],"names":["getAppliedStyles","element","properties","declaration","window","getComputedStyle","reduce","result","propertyName","getPropertyValue","kebabCase","connectFormik","OriginalComponent","InnerComponent","memo","props","prevFormik","prevProps","nextFormik","nextProps","DecoratedComponent","connect","displayName","name","data","message","getLanguageService","translate","UnassignItemError","prototype","CustomError","getShippingMethodId","checkout","preselectedPayment","getPreselectedPayment","indexOf","providerId","undefined","withLanguage","fn","id","language","onClick","testId","translatedString","parsedString","text","div","document","createElement","innerHTML","anchor","querySelector","anchorSiblings","split","outerHTML","parseAnchor","length","href","event","preventDefault","SaveAddressForm","withFormik","handleSubmit","values","onSaveAddress","mapPropsToValues","defaultCountryCode","firstName","lastName","address1","address2","customFields","country","countryCode","stateOrProvince","stateOrProvinceCode","postalCode","phone","city","company","shouldSaveAddress","validationSchema","getFields","getAddressFormFieldsValidationSchema","formFields","googleMapsApiKey","countriesWithAutocomplete","countries","setFieldValue","isLoading","onRequestClose","isFloatingLabelEnabled","Form","autoComplete","LoadingOverlay","AddressForm","shouldShowSaveAddress","className","TranslatedString","Button","disabled","type","variant","isOpen","onAfterOpen","addressFormProps","Modal","additionalModalClassName","header","ModalHeader","shouldShowCloseButton","title","AssignItemInvalidAddressError","AssignItemFailedError","findConsignment","consignments","itemId","find","consignment","includes","lineItemIds","getShippableLineItems","cart","lineItems","physicalItems","item","i","addedByPromotion","isNil","parentId","concat","lineItemIndex","splitItems","quantity","key","variantId","productId","splitItem","imageUrl","options","addresses","onSelectAddress","onUseNewAddress","handleUseNewAddress","useCallback","address","handleSelectAddress","alt","src","map","optionName","value","nameId","AddressSelect","selectedAddress","shippingAddress","getRecommendedShippingOption","availableShippingOptions","ShippingOptionListItem","consignmentId","shippingOption","renderLabel","StaticShippingOption","displayAdditionalInformation","method","ChecklistItem","htmlId","label","inputName","shippingOptions","selectedShippingOptionId","onSelectedOption","handleSelect","Checklist","defaultSelectedItemId","onSelect","selectDefaultShippingOptions","this","selectShippingOption","getConsignments","selectedShippingOption","recommendedOption","singleShippingOption","defaultShippingOption","componentDidMount","subscribeToConsignments","unsubscribe","componentDidUpdate","analyticsTracker","shouldShowShippingOptions","showShippingMethods","componentWillUnmount","render","isMultiShippingMode","invalidShippingMessage","methodId","renderConsignment","ChecklistSkeleton","additionalClassName","rows","renderNoShippingOptions","role","StaticAddress","StaticConsignmentItemList","PureComponent","withAnalytics","noop","shippingOptionIds","forEach","ShippingOptionsForm","subscribeToConsignmentsSelector","createSelector","subscribe","subscriber","isLoadingSelector","_","isLoadingShippingOptions","isSelectingShippingOption","isUpdatingConsignment","isCreatingConsignments","isUpdatingAddress","withCheckout","checkoutService","checkoutState","getCart","getConfig","getCustomer","getCheckout","customer","config","unsortedConsignments","shippableItems","consignmentsOrder","uniq","sortBy","sortConsignments","checkoutSettings","selectConsignmentShippingOption","cartHasChanged","shouldShowOrderComments","shouldDisableSubmit","Fieldset","legend","Legend","Alert","ShippingOptions","OrderComments","state","items","handleCloseErrorModal","setState","createCustomerAddressError","handleSaveAddress","createCustomerAddress","itemAddingAddress","mapAddressFromFormValues","Error","itemKey","handleCloseAddAddressForm","assignItem","onUnhandledError","isValidAddress","syncItems","hasSelectedShippingOptions","currentItems","updatedItemIndex","cartItemIds","updatedConsignment","isEqualAddress","newId","matchingCartItems","filter","matchingCartItemIds","findNewItemId","updateShippableItems","findIndex","getDerivedStateFromProps","getShippableItemsCount","isGuest","onSignIn","onCreateAccount","ErrorModal","error","onClose","shouldShowErrorCode","hasUnassignedLineItems","onSubmit","orderComment","enableReinitialize","MultiShippingForm","onChange","labelContent","useMemo","CheckboxFormField","addressFieldName","fieldName","fieldValue","formFieldName","field","custom","handleChange","onFieldChange","handleAutocompleteToggle","inputValue","onAddressSelect","formAddress","hasAddresses","hasValidCustomerAddress","isValidCustomerAddress","unmountContentWhenLoading","onAutocompleteToggle","Component","ShippingAddressForm","handleFieldValueChange","initialize","deinitialize","buttonId","customFormFields","shouldShowCustomFormFields","style","padding","size","DynamicFormField","parentFieldName","hasRequestedShippingOptions","isShippingStepPending","setSubmitted","useContext","initializeShipping","memoizeOne","defaultOptions","editAddressButtonId","amazonpay","SHIPPING_ADDRESS_FIELDS","isResettingAddress","isUpdatingShippingData","isValid","handleFieldChange","Promise","resolve","setTimeout","isShippingField","updateAddressWithFormData","handleAddressSelect","updateAddress","setValues","mapAddressToFormValues","deleteConsignments","debouncedUpdateAddress","debounce","includeShippingOptions","params","include","addressForm","shouldShowBillingSameAsShipping","some","updatedShippingAddress","Array","isArray","isEqual","contextType","billingSameAsShipping","isInitialValid","isValidSync","formValues","getCustomFormFieldsValidationSchema","SingleShippingForm","customerMessage","isBillingSameAsShipping","onMultiShippingSubmit","onSingleShippingSubmit","shouldShowAddAddressInCheckout","signOut","ShippingForm","onMultiShippingChange","shouldShowMultiShipping","width","StripeStateMapper","stateList","Object","keys","getStripeState","step","isStripeLoading","isStripeAutoStep","isShippingMethodLoading","useState","isNewAddress","setIsNewAddress","isFirstShippingRender","setIsFirstShippingRender","stripeShippingAddress","setStripeShippingAddress","handleLoading","useEffect","containerId","availableShippingList","code","allowedCountries","join","handleStripeShippingAddress","shipping","complete","phoneFieldRequired","line1","line2","postal_code","stepCompleted","isComplete","shippingPopulated","shouldShowContent","names","shippingValue","current","getStylesFromElement","parentContainer","getElementById","getStripeStyles","formInput","formLabel","formError","labelText","color","fieldText","fieldPlaceholderText","fieldErrorText","fieldBackground","fieldInnerShadow","fieldBorder","stripeupe","container","onChangeShipping","availableCountries","getStyles","gatewayId","placeholder","StripeShippingForm","stripeLoadedCallback","handleIsAutoStep","shippingFormProps","AddressFormSkeleton","display","handleMultiShippingModeSwitch","onToggleMultiShipping","updateShippingAddress","isInitializing","handleSingleShippingSubmit","addressValues","updateCheckout","updateBillingAddress","navigateNextStep","billingAddress","promises","hasRemoteBilling","push","all","unassignItem","location","handleMultiShippingSubmit","loadShippingAddressFields","loadShippingOptions","onReady","initializeShippingMethod","deinitializeShippingMethod","providerWithCustomCheckout","PaymentMethodId","email","deleteConsignmentsSelector","deleteConsignment","getShippingAddress","mapToShippingProps","getBillingAddress","getShippingAddressFields","getShippingCountries","isCreatingCustomerAddress","isLoadingShippingCountries","isUpdatingBillingAddress","isUpdatingCheckout","enableOrderComments","features","hasMultiShippingEnabled","shippableItemsCount","assignItemsToAddress","deinitializeShipping","signOutCustomer","unassignItemsToAddress","Shipping","createContext","onToggle","renderField","checked","errorId","getContextValue","selectedItemId","handleToggleItem","isDisabled","children","AccordionContext","ChecklistContext","contextValue","Provider","bodyClassName","classNameSelected","headerClassName","headerClassNameSelected","headerContent","isSelected","transitionEndListener","node","done","addEventListener","CSSTransition","addEndListener","classNames","in","mountOnEnter","timeout","unmountOnExit","Input","Label","htmlFor","content","rest","renderInput","Function","selectedValue","renderHeaderContent","BasicFormField"],"sourceRoot":""}